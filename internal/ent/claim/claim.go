// Code generated by ent, DO NOT EDIT.

package claim

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the claim type in the database.
	Label = "claim"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldShortName holds the string denoting the short_name field in the database.
	FieldShortName = "short_name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeClaimGroups holds the string denoting the claim_groups edge name in mutations.
	EdgeClaimGroups = "claim_groups"
	// Table holds the table name of the claim in the database.
	Table = "claims"
	// ClaimGroupsTable is the table that holds the claim_groups relation/edge. The primary key declared below.
	ClaimGroupsTable = "claim_claim_groups"
	// ClaimGroupsInverseTable is the table name for the ClaimGroup entity.
	// It exists in this package in order to avoid circular dependency with the "claimgroup" package.
	ClaimGroupsInverseTable = "claim_groups"
)

// Columns holds all SQL columns for claim fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldShortName,
	FieldValue,
	FieldDescription,
}

var (
	// ClaimGroupsPrimaryKey and ClaimGroupsColumn2 are the table columns denoting the
	// primary key for the claim_groups relation (M2M).
	ClaimGroupsPrimaryKey = []string{"claim_id", "claim_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Claim queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByShortName orders the results by the short_name field.
func ByShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortName, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByClaimGroupsCount orders the results by claim_groups count.
func ByClaimGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClaimGroupsStep(), opts...)
	}
}

// ByClaimGroups orders the results by claim_groups terms.
func ByClaimGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClaimGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClaimGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClaimGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ClaimGroupsTable, ClaimGroupsPrimaryKey...),
	)
}
