// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stoke/internal/ent/privatekey"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PrivateKey is the model entity for the PrivateKey schema.
type PrivateKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Expires holds the value of the "expires" field.
	Expires time.Time `json:"expires,omitempty"`
	// Renews holds the value of the "renews" field.
	Renews       time.Time `json:"renews,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivateKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case privatekey.FieldID:
			values[i] = new(sql.NullInt64)
		case privatekey.FieldText:
			values[i] = new(sql.NullString)
		case privatekey.FieldExpires, privatekey.FieldRenews:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivateKey fields.
func (pk *PrivateKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privatekey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pk.ID = int(value.Int64)
		case privatekey.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				pk.Text = value.String
			}
		case privatekey.FieldExpires:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires", values[i])
			} else if value.Valid {
				pk.Expires = value.Time
			}
		case privatekey.FieldRenews:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field renews", values[i])
			} else if value.Valid {
				pk.Renews = value.Time
			}
		default:
			pk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrivateKey.
// This includes values selected through modifiers, order, etc.
func (pk *PrivateKey) Value(name string) (ent.Value, error) {
	return pk.selectValues.Get(name)
}

// Update returns a builder for updating this PrivateKey.
// Note that you need to call PrivateKey.Unwrap() before calling this method if this PrivateKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (pk *PrivateKey) Update() *PrivateKeyUpdateOne {
	return NewPrivateKeyClient(pk.config).UpdateOne(pk)
}

// Unwrap unwraps the PrivateKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pk *PrivateKey) Unwrap() *PrivateKey {
	_tx, ok := pk.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivateKey is not a transactional entity")
	}
	pk.config.driver = _tx.drv
	return pk
}

// String implements the fmt.Stringer.
func (pk *PrivateKey) String() string {
	var builder strings.Builder
	builder.WriteString("PrivateKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pk.ID))
	builder.WriteString("text=")
	builder.WriteString(pk.Text)
	builder.WriteString(", ")
	builder.WriteString("expires=")
	builder.WriteString(pk.Expires.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("renews=")
	builder.WriteString(pk.Renews.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrivateKeys is a parsable slice of PrivateKey.
type PrivateKeys []*PrivateKey
