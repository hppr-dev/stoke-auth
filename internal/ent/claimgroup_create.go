// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claim"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClaimGroupCreate is the builder for creating a ClaimGroup entity.
type ClaimGroupCreate struct {
	config
	mutation *ClaimGroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cgc *ClaimGroupCreate) SetName(s string) *ClaimGroupCreate {
	cgc.mutation.SetName(s)
	return cgc
}

// SetDescription sets the "description" field.
func (cgc *ClaimGroupCreate) SetDescription(s string) *ClaimGroupCreate {
	cgc.mutation.SetDescription(s)
	return cgc
}

// SetIsUserGroup sets the "is_user_group" field.
func (cgc *ClaimGroupCreate) SetIsUserGroup(b bool) *ClaimGroupCreate {
	cgc.mutation.SetIsUserGroup(b)
	return cgc
}

// SetNillableIsUserGroup sets the "is_user_group" field if the given value is not nil.
func (cgc *ClaimGroupCreate) SetNillableIsUserGroup(b *bool) *ClaimGroupCreate {
	if b != nil {
		cgc.SetIsUserGroup(*b)
	}
	return cgc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cgc *ClaimGroupCreate) AddUserIDs(ids ...int) *ClaimGroupCreate {
	cgc.mutation.AddUserIDs(ids...)
	return cgc
}

// AddUsers adds the "users" edges to the User entity.
func (cgc *ClaimGroupCreate) AddUsers(u ...*User) *ClaimGroupCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cgc.AddUserIDs(ids...)
}

// AddGroupLinkIDs adds the "group_links" edge to the GroupLink entity by IDs.
func (cgc *ClaimGroupCreate) AddGroupLinkIDs(ids ...int) *ClaimGroupCreate {
	cgc.mutation.AddGroupLinkIDs(ids...)
	return cgc
}

// AddGroupLinks adds the "group_links" edges to the GroupLink entity.
func (cgc *ClaimGroupCreate) AddGroupLinks(g ...*GroupLink) *ClaimGroupCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cgc.AddGroupLinkIDs(ids...)
}

// AddClaimIDs adds the "claims" edge to the Claim entity by IDs.
func (cgc *ClaimGroupCreate) AddClaimIDs(ids ...int) *ClaimGroupCreate {
	cgc.mutation.AddClaimIDs(ids...)
	return cgc
}

// AddClaims adds the "claims" edges to the Claim entity.
func (cgc *ClaimGroupCreate) AddClaims(c ...*Claim) *ClaimGroupCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cgc.AddClaimIDs(ids...)
}

// Mutation returns the ClaimGroupMutation object of the builder.
func (cgc *ClaimGroupCreate) Mutation() *ClaimGroupMutation {
	return cgc.mutation
}

// Save creates the ClaimGroup in the database.
func (cgc *ClaimGroupCreate) Save(ctx context.Context) (*ClaimGroup, error) {
	cgc.defaults()
	return withHooks(ctx, cgc.sqlSave, cgc.mutation, cgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *ClaimGroupCreate) SaveX(ctx context.Context) *ClaimGroup {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *ClaimGroupCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *ClaimGroupCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgc *ClaimGroupCreate) defaults() {
	if _, ok := cgc.mutation.IsUserGroup(); !ok {
		v := claimgroup.DefaultIsUserGroup
		cgc.mutation.SetIsUserGroup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgc *ClaimGroupCreate) check() error {
	if _, ok := cgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ClaimGroup.name"`)}
	}
	if _, ok := cgc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ClaimGroup.description"`)}
	}
	if _, ok := cgc.mutation.IsUserGroup(); !ok {
		return &ValidationError{Name: "is_user_group", err: errors.New(`ent: missing required field "ClaimGroup.is_user_group"`)}
	}
	return nil
}

func (cgc *ClaimGroupCreate) sqlSave(ctx context.Context) (*ClaimGroup, error) {
	if err := cgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cgc.mutation.id = &_node.ID
	cgc.mutation.done = true
	return _node, nil
}

func (cgc *ClaimGroupCreate) createSpec() (*ClaimGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ClaimGroup{config: cgc.config}
		_spec = sqlgraph.NewCreateSpec(claimgroup.Table, sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt))
	)
	if value, ok := cgc.mutation.Name(); ok {
		_spec.SetField(claimgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cgc.mutation.Description(); ok {
		_spec.SetField(claimgroup.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cgc.mutation.IsUserGroup(); ok {
		_spec.SetField(claimgroup.FieldIsUserGroup, field.TypeBool, value)
		_node.IsUserGroup = value
	}
	if nodes := cgc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cgc.mutation.GroupLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cgc.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClaimGroupCreateBulk is the builder for creating many ClaimGroup entities in bulk.
type ClaimGroupCreateBulk struct {
	config
	err      error
	builders []*ClaimGroupCreate
}

// Save creates the ClaimGroup entities in the database.
func (cgcb *ClaimGroupCreateBulk) Save(ctx context.Context) ([]*ClaimGroup, error) {
	if cgcb.err != nil {
		return nil, cgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*ClaimGroup, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClaimGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *ClaimGroupCreateBulk) SaveX(ctx context.Context) []*ClaimGroup {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *ClaimGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *ClaimGroupCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
