// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claim"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/predicate"
	"stoke/internal/ent/privatekey"
	"stoke/internal/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClaim      = "Claim"
	TypeClaimGroup = "ClaimGroup"
	TypeGroupLink  = "GroupLink"
	TypePrivateKey = "PrivateKey"
	TypeUser       = "User"
)

// ClaimMutation represents an operation that mutates the Claim nodes in the graph.
type ClaimMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	short_name          *string
	value               *string
	description         *string
	clearedFields       map[string]struct{}
	claim_groups        map[int]struct{}
	removedclaim_groups map[int]struct{}
	clearedclaim_groups bool
	done                bool
	oldValue            func(context.Context) (*Claim, error)
	predicates          []predicate.Claim
}

var _ ent.Mutation = (*ClaimMutation)(nil)

// claimOption allows management of the mutation configuration using functional options.
type claimOption func(*ClaimMutation)

// newClaimMutation creates new mutation for the Claim entity.
func newClaimMutation(c config, op Op, opts ...claimOption) *ClaimMutation {
	m := &ClaimMutation{
		config:        c,
		op:            op,
		typ:           TypeClaim,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClaimID sets the ID field of the mutation.
func withClaimID(id int) claimOption {
	return func(m *ClaimMutation) {
		var (
			err   error
			once  sync.Once
			value *Claim
		)
		m.oldValue = func(ctx context.Context) (*Claim, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Claim.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClaim sets the old Claim of the mutation.
func withClaim(node *Claim) claimOption {
	return func(m *ClaimMutation) {
		m.oldValue = func(context.Context) (*Claim, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClaimMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClaimMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClaimMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClaimMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Claim.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClaimMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClaimMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Claim entity.
// If the Claim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClaimMutation) ResetName() {
	m.name = nil
}

// SetShortName sets the "short_name" field.
func (m *ClaimMutation) SetShortName(s string) {
	m.short_name = &s
}

// ShortName returns the value of the "short_name" field in the mutation.
func (m *ClaimMutation) ShortName() (r string, exists bool) {
	v := m.short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShortName returns the old "short_name" field's value of the Claim entity.
// If the Claim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimMutation) OldShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortName: %w", err)
	}
	return oldValue.ShortName, nil
}

// ResetShortName resets all changes to the "short_name" field.
func (m *ClaimMutation) ResetShortName() {
	m.short_name = nil
}

// SetValue sets the "value" field.
func (m *ClaimMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ClaimMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Claim entity.
// If the Claim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ClaimMutation) ResetValue() {
	m.value = nil
}

// SetDescription sets the "description" field.
func (m *ClaimMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ClaimMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Claim entity.
// If the Claim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ClaimMutation) ResetDescription() {
	m.description = nil
}

// AddClaimGroupIDs adds the "claim_groups" edge to the ClaimGroup entity by ids.
func (m *ClaimMutation) AddClaimGroupIDs(ids ...int) {
	if m.claim_groups == nil {
		m.claim_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.claim_groups[ids[i]] = struct{}{}
	}
}

// ClearClaimGroups clears the "claim_groups" edge to the ClaimGroup entity.
func (m *ClaimMutation) ClearClaimGroups() {
	m.clearedclaim_groups = true
}

// ClaimGroupsCleared reports if the "claim_groups" edge to the ClaimGroup entity was cleared.
func (m *ClaimMutation) ClaimGroupsCleared() bool {
	return m.clearedclaim_groups
}

// RemoveClaimGroupIDs removes the "claim_groups" edge to the ClaimGroup entity by IDs.
func (m *ClaimMutation) RemoveClaimGroupIDs(ids ...int) {
	if m.removedclaim_groups == nil {
		m.removedclaim_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.claim_groups, ids[i])
		m.removedclaim_groups[ids[i]] = struct{}{}
	}
}

// RemovedClaimGroups returns the removed IDs of the "claim_groups" edge to the ClaimGroup entity.
func (m *ClaimMutation) RemovedClaimGroupsIDs() (ids []int) {
	for id := range m.removedclaim_groups {
		ids = append(ids, id)
	}
	return
}

// ClaimGroupsIDs returns the "claim_groups" edge IDs in the mutation.
func (m *ClaimMutation) ClaimGroupsIDs() (ids []int) {
	for id := range m.claim_groups {
		ids = append(ids, id)
	}
	return
}

// ResetClaimGroups resets all changes to the "claim_groups" edge.
func (m *ClaimMutation) ResetClaimGroups() {
	m.claim_groups = nil
	m.clearedclaim_groups = false
	m.removedclaim_groups = nil
}

// Where appends a list predicates to the ClaimMutation builder.
func (m *ClaimMutation) Where(ps ...predicate.Claim) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClaimMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClaimMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Claim, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClaimMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClaimMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Claim).
func (m *ClaimMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClaimMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, claim.FieldName)
	}
	if m.short_name != nil {
		fields = append(fields, claim.FieldShortName)
	}
	if m.value != nil {
		fields = append(fields, claim.FieldValue)
	}
	if m.description != nil {
		fields = append(fields, claim.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClaimMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case claim.FieldName:
		return m.Name()
	case claim.FieldShortName:
		return m.ShortName()
	case claim.FieldValue:
		return m.Value()
	case claim.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClaimMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case claim.FieldName:
		return m.OldName(ctx)
	case claim.FieldShortName:
		return m.OldShortName(ctx)
	case claim.FieldValue:
		return m.OldValue(ctx)
	case claim.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Claim field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClaimMutation) SetField(name string, value ent.Value) error {
	switch name {
	case claim.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case claim.FieldShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortName(v)
		return nil
	case claim.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case claim.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Claim field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClaimMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClaimMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClaimMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Claim numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClaimMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClaimMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClaimMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Claim nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClaimMutation) ResetField(name string) error {
	switch name {
	case claim.FieldName:
		m.ResetName()
		return nil
	case claim.FieldShortName:
		m.ResetShortName()
		return nil
	case claim.FieldValue:
		m.ResetValue()
		return nil
	case claim.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Claim field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClaimMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.claim_groups != nil {
		edges = append(edges, claim.EdgeClaimGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClaimMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case claim.EdgeClaimGroups:
		ids := make([]ent.Value, 0, len(m.claim_groups))
		for id := range m.claim_groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClaimMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclaim_groups != nil {
		edges = append(edges, claim.EdgeClaimGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClaimMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case claim.EdgeClaimGroups:
		ids := make([]ent.Value, 0, len(m.removedclaim_groups))
		for id := range m.removedclaim_groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClaimMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclaim_groups {
		edges = append(edges, claim.EdgeClaimGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClaimMutation) EdgeCleared(name string) bool {
	switch name {
	case claim.EdgeClaimGroups:
		return m.clearedclaim_groups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClaimMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Claim unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClaimMutation) ResetEdge(name string) error {
	switch name {
	case claim.EdgeClaimGroups:
		m.ResetClaimGroups()
		return nil
	}
	return fmt.Errorf("unknown Claim edge %s", name)
}

// ClaimGroupMutation represents an operation that mutates the ClaimGroup nodes in the graph.
type ClaimGroupMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	description        *string
	clearedFields      map[string]struct{}
	users              map[int]struct{}
	removedusers       map[int]struct{}
	clearedusers       bool
	group_links        map[int]struct{}
	removedgroup_links map[int]struct{}
	clearedgroup_links bool
	claims             map[int]struct{}
	removedclaims      map[int]struct{}
	clearedclaims      bool
	done               bool
	oldValue           func(context.Context) (*ClaimGroup, error)
	predicates         []predicate.ClaimGroup
}

var _ ent.Mutation = (*ClaimGroupMutation)(nil)

// claimgroupOption allows management of the mutation configuration using functional options.
type claimgroupOption func(*ClaimGroupMutation)

// newClaimGroupMutation creates new mutation for the ClaimGroup entity.
func newClaimGroupMutation(c config, op Op, opts ...claimgroupOption) *ClaimGroupMutation {
	m := &ClaimGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeClaimGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClaimGroupID sets the ID field of the mutation.
func withClaimGroupID(id int) claimgroupOption {
	return func(m *ClaimGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ClaimGroup
		)
		m.oldValue = func(ctx context.Context) (*ClaimGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClaimGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClaimGroup sets the old ClaimGroup of the mutation.
func withClaimGroup(node *ClaimGroup) claimgroupOption {
	return func(m *ClaimGroupMutation) {
		m.oldValue = func(context.Context) (*ClaimGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClaimGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClaimGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClaimGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClaimGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClaimGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClaimGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClaimGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ClaimGroup entity.
// If the ClaimGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClaimGroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ClaimGroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ClaimGroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ClaimGroup entity.
// If the ClaimGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClaimGroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ClaimGroupMutation) ResetDescription() {
	m.description = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *ClaimGroupMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *ClaimGroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *ClaimGroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *ClaimGroupMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *ClaimGroupMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *ClaimGroupMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *ClaimGroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddGroupLinkIDs adds the "group_links" edge to the GroupLink entity by ids.
func (m *ClaimGroupMutation) AddGroupLinkIDs(ids ...int) {
	if m.group_links == nil {
		m.group_links = make(map[int]struct{})
	}
	for i := range ids {
		m.group_links[ids[i]] = struct{}{}
	}
}

// ClearGroupLinks clears the "group_links" edge to the GroupLink entity.
func (m *ClaimGroupMutation) ClearGroupLinks() {
	m.clearedgroup_links = true
}

// GroupLinksCleared reports if the "group_links" edge to the GroupLink entity was cleared.
func (m *ClaimGroupMutation) GroupLinksCleared() bool {
	return m.clearedgroup_links
}

// RemoveGroupLinkIDs removes the "group_links" edge to the GroupLink entity by IDs.
func (m *ClaimGroupMutation) RemoveGroupLinkIDs(ids ...int) {
	if m.removedgroup_links == nil {
		m.removedgroup_links = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group_links, ids[i])
		m.removedgroup_links[ids[i]] = struct{}{}
	}
}

// RemovedGroupLinks returns the removed IDs of the "group_links" edge to the GroupLink entity.
func (m *ClaimGroupMutation) RemovedGroupLinksIDs() (ids []int) {
	for id := range m.removedgroup_links {
		ids = append(ids, id)
	}
	return
}

// GroupLinksIDs returns the "group_links" edge IDs in the mutation.
func (m *ClaimGroupMutation) GroupLinksIDs() (ids []int) {
	for id := range m.group_links {
		ids = append(ids, id)
	}
	return
}

// ResetGroupLinks resets all changes to the "group_links" edge.
func (m *ClaimGroupMutation) ResetGroupLinks() {
	m.group_links = nil
	m.clearedgroup_links = false
	m.removedgroup_links = nil
}

// AddClaimIDs adds the "claims" edge to the Claim entity by ids.
func (m *ClaimGroupMutation) AddClaimIDs(ids ...int) {
	if m.claims == nil {
		m.claims = make(map[int]struct{})
	}
	for i := range ids {
		m.claims[ids[i]] = struct{}{}
	}
}

// ClearClaims clears the "claims" edge to the Claim entity.
func (m *ClaimGroupMutation) ClearClaims() {
	m.clearedclaims = true
}

// ClaimsCleared reports if the "claims" edge to the Claim entity was cleared.
func (m *ClaimGroupMutation) ClaimsCleared() bool {
	return m.clearedclaims
}

// RemoveClaimIDs removes the "claims" edge to the Claim entity by IDs.
func (m *ClaimGroupMutation) RemoveClaimIDs(ids ...int) {
	if m.removedclaims == nil {
		m.removedclaims = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.claims, ids[i])
		m.removedclaims[ids[i]] = struct{}{}
	}
}

// RemovedClaims returns the removed IDs of the "claims" edge to the Claim entity.
func (m *ClaimGroupMutation) RemovedClaimsIDs() (ids []int) {
	for id := range m.removedclaims {
		ids = append(ids, id)
	}
	return
}

// ClaimsIDs returns the "claims" edge IDs in the mutation.
func (m *ClaimGroupMutation) ClaimsIDs() (ids []int) {
	for id := range m.claims {
		ids = append(ids, id)
	}
	return
}

// ResetClaims resets all changes to the "claims" edge.
func (m *ClaimGroupMutation) ResetClaims() {
	m.claims = nil
	m.clearedclaims = false
	m.removedclaims = nil
}

// Where appends a list predicates to the ClaimGroupMutation builder.
func (m *ClaimGroupMutation) Where(ps ...predicate.ClaimGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClaimGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClaimGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClaimGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClaimGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClaimGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClaimGroup).
func (m *ClaimGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClaimGroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, claimgroup.FieldName)
	}
	if m.description != nil {
		fields = append(fields, claimgroup.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClaimGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case claimgroup.FieldName:
		return m.Name()
	case claimgroup.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClaimGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case claimgroup.FieldName:
		return m.OldName(ctx)
	case claimgroup.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown ClaimGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClaimGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case claimgroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case claimgroup.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown ClaimGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClaimGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClaimGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClaimGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClaimGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClaimGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClaimGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClaimGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClaimGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClaimGroupMutation) ResetField(name string) error {
	switch name {
	case claimgroup.FieldName:
		m.ResetName()
		return nil
	case claimgroup.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown ClaimGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClaimGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, claimgroup.EdgeUsers)
	}
	if m.group_links != nil {
		edges = append(edges, claimgroup.EdgeGroupLinks)
	}
	if m.claims != nil {
		edges = append(edges, claimgroup.EdgeClaims)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClaimGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case claimgroup.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case claimgroup.EdgeGroupLinks:
		ids := make([]ent.Value, 0, len(m.group_links))
		for id := range m.group_links {
			ids = append(ids, id)
		}
		return ids
	case claimgroup.EdgeClaims:
		ids := make([]ent.Value, 0, len(m.claims))
		for id := range m.claims {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClaimGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, claimgroup.EdgeUsers)
	}
	if m.removedgroup_links != nil {
		edges = append(edges, claimgroup.EdgeGroupLinks)
	}
	if m.removedclaims != nil {
		edges = append(edges, claimgroup.EdgeClaims)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClaimGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case claimgroup.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case claimgroup.EdgeGroupLinks:
		ids := make([]ent.Value, 0, len(m.removedgroup_links))
		for id := range m.removedgroup_links {
			ids = append(ids, id)
		}
		return ids
	case claimgroup.EdgeClaims:
		ids := make([]ent.Value, 0, len(m.removedclaims))
		for id := range m.removedclaims {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClaimGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, claimgroup.EdgeUsers)
	}
	if m.clearedgroup_links {
		edges = append(edges, claimgroup.EdgeGroupLinks)
	}
	if m.clearedclaims {
		edges = append(edges, claimgroup.EdgeClaims)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClaimGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case claimgroup.EdgeUsers:
		return m.clearedusers
	case claimgroup.EdgeGroupLinks:
		return m.clearedgroup_links
	case claimgroup.EdgeClaims:
		return m.clearedclaims
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClaimGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ClaimGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClaimGroupMutation) ResetEdge(name string) error {
	switch name {
	case claimgroup.EdgeUsers:
		m.ResetUsers()
		return nil
	case claimgroup.EdgeGroupLinks:
		m.ResetGroupLinks()
		return nil
	case claimgroup.EdgeClaims:
		m.ResetClaims()
		return nil
	}
	return fmt.Errorf("unknown ClaimGroup edge %s", name)
}

// GroupLinkMutation represents an operation that mutates the GroupLink nodes in the graph.
type GroupLinkMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *string
	resource_spec       *string
	clearedFields       map[string]struct{}
	claim_groups        *int
	clearedclaim_groups bool
	done                bool
	oldValue            func(context.Context) (*GroupLink, error)
	predicates          []predicate.GroupLink
}

var _ ent.Mutation = (*GroupLinkMutation)(nil)

// grouplinkOption allows management of the mutation configuration using functional options.
type grouplinkOption func(*GroupLinkMutation)

// newGroupLinkMutation creates new mutation for the GroupLink entity.
func newGroupLinkMutation(c config, op Op, opts ...grouplinkOption) *GroupLinkMutation {
	m := &GroupLinkMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupLink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupLinkID sets the ID field of the mutation.
func withGroupLinkID(id int) grouplinkOption {
	return func(m *GroupLinkMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupLink
		)
		m.oldValue = func(ctx context.Context) (*GroupLink, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupLink.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupLink sets the old GroupLink of the mutation.
func withGroupLink(node *GroupLink) grouplinkOption {
	return func(m *GroupLinkMutation) {
		m.oldValue = func(context.Context) (*GroupLink, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupLinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupLinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupLinkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupLinkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupLink.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *GroupLinkMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *GroupLinkMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the GroupLink entity.
// If the GroupLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupLinkMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *GroupLinkMutation) ResetType() {
	m._type = nil
}

// SetResourceSpec sets the "resource_spec" field.
func (m *GroupLinkMutation) SetResourceSpec(s string) {
	m.resource_spec = &s
}

// ResourceSpec returns the value of the "resource_spec" field in the mutation.
func (m *GroupLinkMutation) ResourceSpec() (r string, exists bool) {
	v := m.resource_spec
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceSpec returns the old "resource_spec" field's value of the GroupLink entity.
// If the GroupLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupLinkMutation) OldResourceSpec(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceSpec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceSpec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceSpec: %w", err)
	}
	return oldValue.ResourceSpec, nil
}

// ResetResourceSpec resets all changes to the "resource_spec" field.
func (m *GroupLinkMutation) ResetResourceSpec() {
	m.resource_spec = nil
}

// SetClaimGroupsID sets the "claim_groups" edge to the ClaimGroup entity by id.
func (m *GroupLinkMutation) SetClaimGroupsID(id int) {
	m.claim_groups = &id
}

// ClearClaimGroups clears the "claim_groups" edge to the ClaimGroup entity.
func (m *GroupLinkMutation) ClearClaimGroups() {
	m.clearedclaim_groups = true
}

// ClaimGroupsCleared reports if the "claim_groups" edge to the ClaimGroup entity was cleared.
func (m *GroupLinkMutation) ClaimGroupsCleared() bool {
	return m.clearedclaim_groups
}

// ClaimGroupsID returns the "claim_groups" edge ID in the mutation.
func (m *GroupLinkMutation) ClaimGroupsID() (id int, exists bool) {
	if m.claim_groups != nil {
		return *m.claim_groups, true
	}
	return
}

// ClaimGroupsIDs returns the "claim_groups" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClaimGroupsID instead. It exists only for internal usage by the builders.
func (m *GroupLinkMutation) ClaimGroupsIDs() (ids []int) {
	if id := m.claim_groups; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClaimGroups resets all changes to the "claim_groups" edge.
func (m *GroupLinkMutation) ResetClaimGroups() {
	m.claim_groups = nil
	m.clearedclaim_groups = false
}

// Where appends a list predicates to the GroupLinkMutation builder.
func (m *GroupLinkMutation) Where(ps ...predicate.GroupLink) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupLinkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupLinkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupLink, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupLinkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupLinkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupLink).
func (m *GroupLinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupLinkMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._type != nil {
		fields = append(fields, grouplink.FieldType)
	}
	if m.resource_spec != nil {
		fields = append(fields, grouplink.FieldResourceSpec)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupLinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grouplink.FieldType:
		return m.GetType()
	case grouplink.FieldResourceSpec:
		return m.ResourceSpec()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupLinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grouplink.FieldType:
		return m.OldType(ctx)
	case grouplink.FieldResourceSpec:
		return m.OldResourceSpec(ctx)
	}
	return nil, fmt.Errorf("unknown GroupLink field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupLinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grouplink.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case grouplink.FieldResourceSpec:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceSpec(v)
		return nil
	}
	return fmt.Errorf("unknown GroupLink field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupLinkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupLinkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupLinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupLink numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupLinkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupLinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupLinkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupLink nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupLinkMutation) ResetField(name string) error {
	switch name {
	case grouplink.FieldType:
		m.ResetType()
		return nil
	case grouplink.FieldResourceSpec:
		m.ResetResourceSpec()
		return nil
	}
	return fmt.Errorf("unknown GroupLink field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupLinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.claim_groups != nil {
		edges = append(edges, grouplink.EdgeClaimGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupLinkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grouplink.EdgeClaimGroups:
		if id := m.claim_groups; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupLinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupLinkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupLinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclaim_groups {
		edges = append(edges, grouplink.EdgeClaimGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupLinkMutation) EdgeCleared(name string) bool {
	switch name {
	case grouplink.EdgeClaimGroups:
		return m.clearedclaim_groups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupLinkMutation) ClearEdge(name string) error {
	switch name {
	case grouplink.EdgeClaimGroups:
		m.ClearClaimGroups()
		return nil
	}
	return fmt.Errorf("unknown GroupLink unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupLinkMutation) ResetEdge(name string) error {
	switch name {
	case grouplink.EdgeClaimGroups:
		m.ResetClaimGroups()
		return nil
	}
	return fmt.Errorf("unknown GroupLink edge %s", name)
}

// PrivateKeyMutation represents an operation that mutates the PrivateKey nodes in the graph.
type PrivateKeyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	expires       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PrivateKey, error)
	predicates    []predicate.PrivateKey
}

var _ ent.Mutation = (*PrivateKeyMutation)(nil)

// privatekeyOption allows management of the mutation configuration using functional options.
type privatekeyOption func(*PrivateKeyMutation)

// newPrivateKeyMutation creates new mutation for the PrivateKey entity.
func newPrivateKeyMutation(c config, op Op, opts ...privatekeyOption) *PrivateKeyMutation {
	m := &PrivateKeyMutation{
		config:        c,
		op:            op,
		typ:           TypePrivateKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrivateKeyID sets the ID field of the mutation.
func withPrivateKeyID(id int) privatekeyOption {
	return func(m *PrivateKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *PrivateKey
		)
		m.oldValue = func(ctx context.Context) (*PrivateKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PrivateKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrivateKey sets the old PrivateKey of the mutation.
func withPrivateKey(node *PrivateKey) privatekeyOption {
	return func(m *PrivateKeyMutation) {
		m.oldValue = func(context.Context) (*PrivateKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrivateKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrivateKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrivateKeyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrivateKeyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PrivateKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *PrivateKeyMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *PrivateKeyMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *PrivateKeyMutation) ResetText() {
	m.text = nil
}

// SetExpires sets the "expires" field.
func (m *PrivateKeyMutation) SetExpires(t time.Time) {
	m.expires = &t
}

// Expires returns the value of the "expires" field in the mutation.
func (m *PrivateKeyMutation) Expires() (r time.Time, exists bool) {
	v := m.expires
	if v == nil {
		return
	}
	return *v, true
}

// OldExpires returns the old "expires" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldExpires(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpires is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpires requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpires: %w", err)
	}
	return oldValue.Expires, nil
}

// ResetExpires resets all changes to the "expires" field.
func (m *PrivateKeyMutation) ResetExpires() {
	m.expires = nil
}

// Where appends a list predicates to the PrivateKeyMutation builder.
func (m *PrivateKeyMutation) Where(ps ...predicate.PrivateKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrivateKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrivateKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PrivateKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrivateKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrivateKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PrivateKey).
func (m *PrivateKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrivateKeyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.text != nil {
		fields = append(fields, privatekey.FieldText)
	}
	if m.expires != nil {
		fields = append(fields, privatekey.FieldExpires)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrivateKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case privatekey.FieldText:
		return m.Text()
	case privatekey.FieldExpires:
		return m.Expires()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrivateKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case privatekey.FieldText:
		return m.OldText(ctx)
	case privatekey.FieldExpires:
		return m.OldExpires(ctx)
	}
	return nil, fmt.Errorf("unknown PrivateKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case privatekey.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case privatekey.FieldExpires:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpires(v)
		return nil
	}
	return fmt.Errorf("unknown PrivateKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrivateKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrivateKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PrivateKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrivateKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrivateKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrivateKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PrivateKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrivateKeyMutation) ResetField(name string) error {
	switch name {
	case privatekey.FieldText:
		m.ResetText()
		return nil
	case privatekey.FieldExpires:
		m.ResetExpires()
		return nil
	}
	return fmt.Errorf("unknown PrivateKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrivateKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrivateKeyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrivateKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrivateKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrivateKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrivateKeyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrivateKeyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PrivateKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrivateKeyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PrivateKey edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	fname               *string
	lname               *string
	email               *string
	username            *string
	password            *string
	salt                *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	claim_groups        map[int]struct{}
	removedclaim_groups map[int]struct{}
	clearedclaim_groups bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFname sets the "fname" field.
func (m *UserMutation) SetFname(s string) {
	m.fname = &s
}

// Fname returns the value of the "fname" field in the mutation.
func (m *UserMutation) Fname() (r string, exists bool) {
	v := m.fname
	if v == nil {
		return
	}
	return *v, true
}

// OldFname returns the old "fname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFname: %w", err)
	}
	return oldValue.Fname, nil
}

// ResetFname resets all changes to the "fname" field.
func (m *UserMutation) ResetFname() {
	m.fname = nil
}

// SetLname sets the "lname" field.
func (m *UserMutation) SetLname(s string) {
	m.lname = &s
}

// Lname returns the value of the "lname" field in the mutation.
func (m *UserMutation) Lname() (r string, exists bool) {
	v := m.lname
	if v == nil {
		return
	}
	return *v, true
}

// OldLname returns the old "lname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLname: %w", err)
	}
	return oldValue.Lname, nil
}

// ResetLname resets all changes to the "lname" field.
func (m *UserMutation) ResetLname() {
	m.lname = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetSalt sets the "salt" field.
func (m *UserMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *UserMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *UserMutation) ResetSalt() {
	m.salt = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddClaimGroupIDs adds the "claim_groups" edge to the ClaimGroup entity by ids.
func (m *UserMutation) AddClaimGroupIDs(ids ...int) {
	if m.claim_groups == nil {
		m.claim_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.claim_groups[ids[i]] = struct{}{}
	}
}

// ClearClaimGroups clears the "claim_groups" edge to the ClaimGroup entity.
func (m *UserMutation) ClearClaimGroups() {
	m.clearedclaim_groups = true
}

// ClaimGroupsCleared reports if the "claim_groups" edge to the ClaimGroup entity was cleared.
func (m *UserMutation) ClaimGroupsCleared() bool {
	return m.clearedclaim_groups
}

// RemoveClaimGroupIDs removes the "claim_groups" edge to the ClaimGroup entity by IDs.
func (m *UserMutation) RemoveClaimGroupIDs(ids ...int) {
	if m.removedclaim_groups == nil {
		m.removedclaim_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.claim_groups, ids[i])
		m.removedclaim_groups[ids[i]] = struct{}{}
	}
}

// RemovedClaimGroups returns the removed IDs of the "claim_groups" edge to the ClaimGroup entity.
func (m *UserMutation) RemovedClaimGroupsIDs() (ids []int) {
	for id := range m.removedclaim_groups {
		ids = append(ids, id)
	}
	return
}

// ClaimGroupsIDs returns the "claim_groups" edge IDs in the mutation.
func (m *UserMutation) ClaimGroupsIDs() (ids []int) {
	for id := range m.claim_groups {
		ids = append(ids, id)
	}
	return
}

// ResetClaimGroups resets all changes to the "claim_groups" edge.
func (m *UserMutation) ResetClaimGroups() {
	m.claim_groups = nil
	m.clearedclaim_groups = false
	m.removedclaim_groups = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.fname != nil {
		fields = append(fields, user.FieldFname)
	}
	if m.lname != nil {
		fields = append(fields, user.FieldLname)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.salt != nil {
		fields = append(fields, user.FieldSalt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFname:
		return m.Fname()
	case user.FieldLname:
		return m.Lname()
	case user.FieldEmail:
		return m.Email()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldSalt:
		return m.Salt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFname:
		return m.OldFname(ctx)
	case user.FieldLname:
		return m.OldLname(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldSalt:
		return m.OldSalt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFname(v)
		return nil
	case user.FieldLname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLname(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFname:
		m.ResetFname()
		return nil
	case user.FieldLname:
		m.ResetLname()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldSalt:
		m.ResetSalt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.claim_groups != nil {
		edges = append(edges, user.EdgeClaimGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeClaimGroups:
		ids := make([]ent.Value, 0, len(m.claim_groups))
		for id := range m.claim_groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclaim_groups != nil {
		edges = append(edges, user.EdgeClaimGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeClaimGroups:
		ids := make([]ent.Value, 0, len(m.removedclaim_groups))
		for id := range m.removedclaim_groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclaim_groups {
		edges = append(edges, user.EdgeClaimGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeClaimGroups:
		return m.clearedclaim_groups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeClaimGroups:
		m.ResetClaimGroups()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
