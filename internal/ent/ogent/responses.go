// Code generated by ent, DO NOT EDIT.

package ogent

import "stoke/internal/ent"

func NewClaimCreate(e *ent.Claim) *ClaimCreate {
	if e == nil {
		return nil
	}
	var ret ClaimCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.ShortName = e.ShortName
	ret.Value = e.Value
	ret.Description = e.Description
	return &ret
}

func NewClaimCreates(es []*ent.Claim) []ClaimCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimCreate, len(es))
	for i, e := range es {
		r[i] = NewClaimCreate(e).Elem()
	}
	return r
}

func (c *ClaimCreate) Elem() ClaimCreate {
	if c == nil {
		return ClaimCreate{}
	}
	return *c
}

func NewClaimGroupCreate(e *ent.ClaimGroup) *ClaimGroupCreate {
	if e == nil {
		return nil
	}
	var ret ClaimGroupCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewClaimGroupCreates(es []*ent.ClaimGroup) []ClaimGroupCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupCreate, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupCreate(e).Elem()
	}
	return r
}

func (cg *ClaimGroupCreate) Elem() ClaimGroupCreate {
	if cg == nil {
		return ClaimGroupCreate{}
	}
	return *cg
}

func NewClaimGroupList(e *ent.ClaimGroup) *ClaimGroupList {
	if e == nil {
		return nil
	}
	var ret ClaimGroupList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewClaimGroupLists(es []*ent.ClaimGroup) []ClaimGroupList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupList, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupList(e).Elem()
	}
	return r
}

func (cg *ClaimGroupList) Elem() ClaimGroupList {
	if cg == nil {
		return ClaimGroupList{}
	}
	return *cg
}

func NewClaimGroupRead(e *ent.ClaimGroup) *ClaimGroupRead {
	if e == nil {
		return nil
	}
	var ret ClaimGroupRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewClaimGroupReads(es []*ent.ClaimGroup) []ClaimGroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupRead, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupRead(e).Elem()
	}
	return r
}

func (cg *ClaimGroupRead) Elem() ClaimGroupRead {
	if cg == nil {
		return ClaimGroupRead{}
	}
	return *cg
}

func NewClaimGroupUpdate(e *ent.ClaimGroup) *ClaimGroupUpdate {
	if e == nil {
		return nil
	}
	var ret ClaimGroupUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewClaimGroupUpdates(es []*ent.ClaimGroup) []ClaimGroupUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupUpdate, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupUpdate(e).Elem()
	}
	return r
}

func (cg *ClaimGroupUpdate) Elem() ClaimGroupUpdate {
	if cg == nil {
		return ClaimGroupUpdate{}
	}
	return *cg
}

func NewClaimGroupClaimsList(e *ent.Claim) *ClaimGroupClaimsList {
	if e == nil {
		return nil
	}
	var ret ClaimGroupClaimsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.ShortName = e.ShortName
	ret.Value = e.Value
	ret.Description = e.Description
	return &ret
}

func NewClaimGroupClaimsLists(es []*ent.Claim) []ClaimGroupClaimsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupClaimsList, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupClaimsList(e).Elem()
	}
	return r
}

func (c *ClaimGroupClaimsList) Elem() ClaimGroupClaimsList {
	if c == nil {
		return ClaimGroupClaimsList{}
	}
	return *c
}

func NewClaimGroupGroupLinksList(e *ent.GroupLink) *ClaimGroupGroupLinksList {
	if e == nil {
		return nil
	}
	var ret ClaimGroupGroupLinksList
	ret.ID = e.ID
	ret.Type = e.Type
	ret.ResourceSpec = e.ResourceSpec
	return &ret
}

func NewClaimGroupGroupLinksLists(es []*ent.GroupLink) []ClaimGroupGroupLinksList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupGroupLinksList, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupGroupLinksList(e).Elem()
	}
	return r
}

func (gl *ClaimGroupGroupLinksList) Elem() ClaimGroupGroupLinksList {
	if gl == nil {
		return ClaimGroupGroupLinksList{}
	}
	return *gl
}

func NewClaimGroupUsersList(e *ent.User) *ClaimGroupUsersList {
	if e == nil {
		return nil
	}
	var ret ClaimGroupUsersList
	ret.ID = e.ID
	ret.Fname = e.Fname
	ret.Lname = e.Lname
	ret.Email = e.Email
	ret.Username = e.Username
	ret.CreatedAt = e.CreatedAt
	return &ret
}

func NewClaimGroupUsersLists(es []*ent.User) []ClaimGroupUsersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimGroupUsersList, len(es))
	for i, e := range es {
		r[i] = NewClaimGroupUsersList(e).Elem()
	}
	return r
}

func (u *ClaimGroupUsersList) Elem() ClaimGroupUsersList {
	if u == nil {
		return ClaimGroupUsersList{}
	}
	return *u
}

func NewClaimList(e *ent.Claim) *ClaimList {
	if e == nil {
		return nil
	}
	var ret ClaimList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.ShortName = e.ShortName
	ret.Value = e.Value
	ret.Description = e.Description
	return &ret
}

func NewClaimLists(es []*ent.Claim) []ClaimList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimList, len(es))
	for i, e := range es {
		r[i] = NewClaimList(e).Elem()
	}
	return r
}

func (c *ClaimList) Elem() ClaimList {
	if c == nil {
		return ClaimList{}
	}
	return *c
}

func NewClaimRead(e *ent.Claim) *ClaimRead {
	if e == nil {
		return nil
	}
	var ret ClaimRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.ShortName = e.ShortName
	ret.Value = e.Value
	ret.Description = e.Description
	return &ret
}

func NewClaimReads(es []*ent.Claim) []ClaimRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimRead, len(es))
	for i, e := range es {
		r[i] = NewClaimRead(e).Elem()
	}
	return r
}

func (c *ClaimRead) Elem() ClaimRead {
	if c == nil {
		return ClaimRead{}
	}
	return *c
}

func NewClaimUpdate(e *ent.Claim) *ClaimUpdate {
	if e == nil {
		return nil
	}
	var ret ClaimUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.ShortName = e.ShortName
	ret.Value = e.Value
	ret.Description = e.Description
	return &ret
}

func NewClaimUpdates(es []*ent.Claim) []ClaimUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimUpdate, len(es))
	for i, e := range es {
		r[i] = NewClaimUpdate(e).Elem()
	}
	return r
}

func (c *ClaimUpdate) Elem() ClaimUpdate {
	if c == nil {
		return ClaimUpdate{}
	}
	return *c
}

func NewClaimClaimGroupsList(e *ent.ClaimGroup) *ClaimClaimGroupsList {
	if e == nil {
		return nil
	}
	var ret ClaimClaimGroupsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewClaimClaimGroupsLists(es []*ent.ClaimGroup) []ClaimClaimGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClaimClaimGroupsList, len(es))
	for i, e := range es {
		r[i] = NewClaimClaimGroupsList(e).Elem()
	}
	return r
}

func (cg *ClaimClaimGroupsList) Elem() ClaimClaimGroupsList {
	if cg == nil {
		return ClaimClaimGroupsList{}
	}
	return *cg
}

func NewGroupLinkCreate(e *ent.GroupLink) *GroupLinkCreate {
	if e == nil {
		return nil
	}
	var ret GroupLinkCreate
	ret.ID = e.ID
	ret.Type = e.Type
	ret.ResourceSpec = e.ResourceSpec
	return &ret
}

func NewGroupLinkCreates(es []*ent.GroupLink) []GroupLinkCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupLinkCreate, len(es))
	for i, e := range es {
		r[i] = NewGroupLinkCreate(e).Elem()
	}
	return r
}

func (gl *GroupLinkCreate) Elem() GroupLinkCreate {
	if gl == nil {
		return GroupLinkCreate{}
	}
	return *gl
}

func NewGroupLinkList(e *ent.GroupLink) *GroupLinkList {
	if e == nil {
		return nil
	}
	var ret GroupLinkList
	ret.ID = e.ID
	ret.Type = e.Type
	ret.ResourceSpec = e.ResourceSpec
	return &ret
}

func NewGroupLinkLists(es []*ent.GroupLink) []GroupLinkList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupLinkList, len(es))
	for i, e := range es {
		r[i] = NewGroupLinkList(e).Elem()
	}
	return r
}

func (gl *GroupLinkList) Elem() GroupLinkList {
	if gl == nil {
		return GroupLinkList{}
	}
	return *gl
}

func NewGroupLinkRead(e *ent.GroupLink) *GroupLinkRead {
	if e == nil {
		return nil
	}
	var ret GroupLinkRead
	ret.ID = e.ID
	ret.Type = e.Type
	ret.ResourceSpec = e.ResourceSpec
	return &ret
}

func NewGroupLinkReads(es []*ent.GroupLink) []GroupLinkRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupLinkRead, len(es))
	for i, e := range es {
		r[i] = NewGroupLinkRead(e).Elem()
	}
	return r
}

func (gl *GroupLinkRead) Elem() GroupLinkRead {
	if gl == nil {
		return GroupLinkRead{}
	}
	return *gl
}

func NewGroupLinkUpdate(e *ent.GroupLink) *GroupLinkUpdate {
	if e == nil {
		return nil
	}
	var ret GroupLinkUpdate
	ret.ID = e.ID
	ret.Type = e.Type
	ret.ResourceSpec = e.ResourceSpec
	return &ret
}

func NewGroupLinkUpdates(es []*ent.GroupLink) []GroupLinkUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupLinkUpdate, len(es))
	for i, e := range es {
		r[i] = NewGroupLinkUpdate(e).Elem()
	}
	return r
}

func (gl *GroupLinkUpdate) Elem() GroupLinkUpdate {
	if gl == nil {
		return GroupLinkUpdate{}
	}
	return *gl
}

func NewGroupLinkClaimGroupsRead(e *ent.ClaimGroup) *GroupLinkClaimGroupsRead {
	if e == nil {
		return nil
	}
	var ret GroupLinkClaimGroupsRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewGroupLinkClaimGroupsReads(es []*ent.ClaimGroup) []GroupLinkClaimGroupsRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupLinkClaimGroupsRead, len(es))
	for i, e := range es {
		r[i] = NewGroupLinkClaimGroupsRead(e).Elem()
	}
	return r
}

func (cg *GroupLinkClaimGroupsRead) Elem() GroupLinkClaimGroupsRead {
	if cg == nil {
		return GroupLinkClaimGroupsRead{}
	}
	return *cg
}

func NewPrivateKeyList(e *ent.PrivateKey) *PrivateKeyList {
	if e == nil {
		return nil
	}
	var ret PrivateKeyList
	ret.ID = e.ID
	ret.Text = e.Text
	ret.Expires = e.Expires
	ret.Renews = e.Renews
	return &ret
}

func NewPrivateKeyLists(es []*ent.PrivateKey) []PrivateKeyList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PrivateKeyList, len(es))
	for i, e := range es {
		r[i] = NewPrivateKeyList(e).Elem()
	}
	return r
}

func (pk *PrivateKeyList) Elem() PrivateKeyList {
	if pk == nil {
		return PrivateKeyList{}
	}
	return *pk
}

func NewPrivateKeyRead(e *ent.PrivateKey) *PrivateKeyRead {
	if e == nil {
		return nil
	}
	var ret PrivateKeyRead
	ret.ID = e.ID
	ret.Text = e.Text
	ret.Expires = e.Expires
	ret.Renews = e.Renews
	return &ret
}

func NewPrivateKeyReads(es []*ent.PrivateKey) []PrivateKeyRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PrivateKeyRead, len(es))
	for i, e := range es {
		r[i] = NewPrivateKeyRead(e).Elem()
	}
	return r
}

func (pk *PrivateKeyRead) Elem() PrivateKeyRead {
	if pk == nil {
		return PrivateKeyRead{}
	}
	return *pk
}

func NewUserList(e *ent.User) *UserList {
	if e == nil {
		return nil
	}
	var ret UserList
	ret.ID = e.ID
	ret.Fname = e.Fname
	ret.Lname = e.Lname
	ret.Email = e.Email
	ret.Username = e.Username
	ret.CreatedAt = e.CreatedAt
	return &ret
}

func NewUserLists(es []*ent.User) []UserList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserList, len(es))
	for i, e := range es {
		r[i] = NewUserList(e).Elem()
	}
	return r
}

func (u *UserList) Elem() UserList {
	if u == nil {
		return UserList{}
	}
	return *u
}

func NewUserClaimGroupsList(e *ent.ClaimGroup) *UserClaimGroupsList {
	if e == nil {
		return nil
	}
	var ret UserClaimGroupsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.IsUserGroup = e.IsUserGroup
	return &ret
}

func NewUserClaimGroupsLists(es []*ent.ClaimGroup) []UserClaimGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserClaimGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserClaimGroupsList(e).Elem()
	}
	return r
}

func (cg *UserClaimGroupsList) Elem() UserClaimGroupsList {
	if cg == nil {
		return UserClaimGroupsList{}
	}
	return *cg
}
