// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupLinkUpdate is the builder for updating GroupLink entities.
type GroupLinkUpdate struct {
	config
	hooks    []Hook
	mutation *GroupLinkMutation
}

// Where appends a list predicates to the GroupLinkUpdate builder.
func (glu *GroupLinkUpdate) Where(ps ...predicate.GroupLink) *GroupLinkUpdate {
	glu.mutation.Where(ps...)
	return glu
}

// SetType sets the "type" field.
func (glu *GroupLinkUpdate) SetType(s string) *GroupLinkUpdate {
	glu.mutation.SetType(s)
	return glu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (glu *GroupLinkUpdate) SetNillableType(s *string) *GroupLinkUpdate {
	if s != nil {
		glu.SetType(*s)
	}
	return glu
}

// SetResourceSpec sets the "resource_spec" field.
func (glu *GroupLinkUpdate) SetResourceSpec(s string) *GroupLinkUpdate {
	glu.mutation.SetResourceSpec(s)
	return glu
}

// SetNillableResourceSpec sets the "resource_spec" field if the given value is not nil.
func (glu *GroupLinkUpdate) SetNillableResourceSpec(s *string) *GroupLinkUpdate {
	if s != nil {
		glu.SetResourceSpec(*s)
	}
	return glu
}

// SetClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID.
func (glu *GroupLinkUpdate) SetClaimGroupID(id int) *GroupLinkUpdate {
	glu.mutation.SetClaimGroupID(id)
	return glu
}

// SetNillableClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID if the given value is not nil.
func (glu *GroupLinkUpdate) SetNillableClaimGroupID(id *int) *GroupLinkUpdate {
	if id != nil {
		glu = glu.SetClaimGroupID(*id)
	}
	return glu
}

// SetClaimGroup sets the "claim_group" edge to the ClaimGroup entity.
func (glu *GroupLinkUpdate) SetClaimGroup(c *ClaimGroup) *GroupLinkUpdate {
	return glu.SetClaimGroupID(c.ID)
}

// Mutation returns the GroupLinkMutation object of the builder.
func (glu *GroupLinkUpdate) Mutation() *GroupLinkMutation {
	return glu.mutation
}

// ClearClaimGroup clears the "claim_group" edge to the ClaimGroup entity.
func (glu *GroupLinkUpdate) ClearClaimGroup() *GroupLinkUpdate {
	glu.mutation.ClearClaimGroup()
	return glu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glu *GroupLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, glu.sqlSave, glu.mutation, glu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glu *GroupLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := glu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glu *GroupLinkUpdate) Exec(ctx context.Context) error {
	_, err := glu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glu *GroupLinkUpdate) ExecX(ctx context.Context) {
	if err := glu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glu *GroupLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grouplink.Table, grouplink.Columns, sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt))
	if ps := glu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glu.mutation.GetType(); ok {
		_spec.SetField(grouplink.FieldType, field.TypeString, value)
	}
	if value, ok := glu.mutation.ResourceSpec(); ok {
		_spec.SetField(grouplink.FieldResourceSpec, field.TypeString, value)
	}
	if glu.mutation.ClaimGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouplink.ClaimGroupTable,
			Columns: []string{grouplink.ClaimGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.ClaimGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouplink.ClaimGroupTable,
			Columns: []string{grouplink.ClaimGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouplink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	glu.mutation.done = true
	return n, nil
}

// GroupLinkUpdateOne is the builder for updating a single GroupLink entity.
type GroupLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupLinkMutation
}

// SetType sets the "type" field.
func (gluo *GroupLinkUpdateOne) SetType(s string) *GroupLinkUpdateOne {
	gluo.mutation.SetType(s)
	return gluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gluo *GroupLinkUpdateOne) SetNillableType(s *string) *GroupLinkUpdateOne {
	if s != nil {
		gluo.SetType(*s)
	}
	return gluo
}

// SetResourceSpec sets the "resource_spec" field.
func (gluo *GroupLinkUpdateOne) SetResourceSpec(s string) *GroupLinkUpdateOne {
	gluo.mutation.SetResourceSpec(s)
	return gluo
}

// SetNillableResourceSpec sets the "resource_spec" field if the given value is not nil.
func (gluo *GroupLinkUpdateOne) SetNillableResourceSpec(s *string) *GroupLinkUpdateOne {
	if s != nil {
		gluo.SetResourceSpec(*s)
	}
	return gluo
}

// SetClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID.
func (gluo *GroupLinkUpdateOne) SetClaimGroupID(id int) *GroupLinkUpdateOne {
	gluo.mutation.SetClaimGroupID(id)
	return gluo
}

// SetNillableClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID if the given value is not nil.
func (gluo *GroupLinkUpdateOne) SetNillableClaimGroupID(id *int) *GroupLinkUpdateOne {
	if id != nil {
		gluo = gluo.SetClaimGroupID(*id)
	}
	return gluo
}

// SetClaimGroup sets the "claim_group" edge to the ClaimGroup entity.
func (gluo *GroupLinkUpdateOne) SetClaimGroup(c *ClaimGroup) *GroupLinkUpdateOne {
	return gluo.SetClaimGroupID(c.ID)
}

// Mutation returns the GroupLinkMutation object of the builder.
func (gluo *GroupLinkUpdateOne) Mutation() *GroupLinkMutation {
	return gluo.mutation
}

// ClearClaimGroup clears the "claim_group" edge to the ClaimGroup entity.
func (gluo *GroupLinkUpdateOne) ClearClaimGroup() *GroupLinkUpdateOne {
	gluo.mutation.ClearClaimGroup()
	return gluo
}

// Where appends a list predicates to the GroupLinkUpdate builder.
func (gluo *GroupLinkUpdateOne) Where(ps ...predicate.GroupLink) *GroupLinkUpdateOne {
	gluo.mutation.Where(ps...)
	return gluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gluo *GroupLinkUpdateOne) Select(field string, fields ...string) *GroupLinkUpdateOne {
	gluo.fields = append([]string{field}, fields...)
	return gluo
}

// Save executes the query and returns the updated GroupLink entity.
func (gluo *GroupLinkUpdateOne) Save(ctx context.Context) (*GroupLink, error) {
	return withHooks(ctx, gluo.sqlSave, gluo.mutation, gluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gluo *GroupLinkUpdateOne) SaveX(ctx context.Context) *GroupLink {
	node, err := gluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gluo *GroupLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := gluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gluo *GroupLinkUpdateOne) ExecX(ctx context.Context) {
	if err := gluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gluo *GroupLinkUpdateOne) sqlSave(ctx context.Context) (_node *GroupLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(grouplink.Table, grouplink.Columns, sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt))
	id, ok := gluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouplink.FieldID)
		for _, f := range fields {
			if !grouplink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grouplink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gluo.mutation.GetType(); ok {
		_spec.SetField(grouplink.FieldType, field.TypeString, value)
	}
	if value, ok := gluo.mutation.ResourceSpec(); ok {
		_spec.SetField(grouplink.FieldResourceSpec, field.TypeString, value)
	}
	if gluo.mutation.ClaimGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouplink.ClaimGroupTable,
			Columns: []string{grouplink.ClaimGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.ClaimGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouplink.ClaimGroupTable,
			Columns: []string{grouplink.ClaimGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupLink{config: gluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouplink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gluo.mutation.done = true
	return _node, nil
}
