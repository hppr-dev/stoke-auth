// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"stoke/internal/ent/migrate"

	"stoke/internal/ent/claim"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/privatekey"
	"stoke/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Claim is the client for interacting with the Claim builders.
	Claim *ClaimClient
	// ClaimGroup is the client for interacting with the ClaimGroup builders.
	ClaimGroup *ClaimGroupClient
	// GroupLink is the client for interacting with the GroupLink builders.
	GroupLink *GroupLinkClient
	// PrivateKey is the client for interacting with the PrivateKey builders.
	PrivateKey *PrivateKeyClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Claim = NewClaimClient(c.config)
	c.ClaimGroup = NewClaimGroupClient(c.config)
	c.GroupLink = NewGroupLinkClient(c.config)
	c.PrivateKey = NewPrivateKeyClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Claim:      NewClaimClient(cfg),
		ClaimGroup: NewClaimGroupClient(cfg),
		GroupLink:  NewGroupLinkClient(cfg),
		PrivateKey: NewPrivateKeyClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Claim:      NewClaimClient(cfg),
		ClaimGroup: NewClaimGroupClient(cfg),
		GroupLink:  NewGroupLinkClient(cfg),
		PrivateKey: NewPrivateKeyClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Claim.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Claim.Use(hooks...)
	c.ClaimGroup.Use(hooks...)
	c.GroupLink.Use(hooks...)
	c.PrivateKey.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Claim.Intercept(interceptors...)
	c.ClaimGroup.Intercept(interceptors...)
	c.GroupLink.Intercept(interceptors...)
	c.PrivateKey.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ClaimMutation:
		return c.Claim.mutate(ctx, m)
	case *ClaimGroupMutation:
		return c.ClaimGroup.mutate(ctx, m)
	case *GroupLinkMutation:
		return c.GroupLink.mutate(ctx, m)
	case *PrivateKeyMutation:
		return c.PrivateKey.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ClaimClient is a client for the Claim schema.
type ClaimClient struct {
	config
}

// NewClaimClient returns a client for the Claim from the given config.
func NewClaimClient(c config) *ClaimClient {
	return &ClaimClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `claim.Hooks(f(g(h())))`.
func (c *ClaimClient) Use(hooks ...Hook) {
	c.hooks.Claim = append(c.hooks.Claim, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `claim.Intercept(f(g(h())))`.
func (c *ClaimClient) Intercept(interceptors ...Interceptor) {
	c.inters.Claim = append(c.inters.Claim, interceptors...)
}

// Create returns a builder for creating a Claim entity.
func (c *ClaimClient) Create() *ClaimCreate {
	mutation := newClaimMutation(c.config, OpCreate)
	return &ClaimCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Claim entities.
func (c *ClaimClient) CreateBulk(builders ...*ClaimCreate) *ClaimCreateBulk {
	return &ClaimCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClaimClient) MapCreateBulk(slice any, setFunc func(*ClaimCreate, int)) *ClaimCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClaimCreateBulk{err: fmt.Errorf("calling to ClaimClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClaimCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClaimCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Claim.
func (c *ClaimClient) Update() *ClaimUpdate {
	mutation := newClaimMutation(c.config, OpUpdate)
	return &ClaimUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClaimClient) UpdateOne(cl *Claim) *ClaimUpdateOne {
	mutation := newClaimMutation(c.config, OpUpdateOne, withClaim(cl))
	return &ClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClaimClient) UpdateOneID(id int) *ClaimUpdateOne {
	mutation := newClaimMutation(c.config, OpUpdateOne, withClaimID(id))
	return &ClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Claim.
func (c *ClaimClient) Delete() *ClaimDelete {
	mutation := newClaimMutation(c.config, OpDelete)
	return &ClaimDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClaimClient) DeleteOne(cl *Claim) *ClaimDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClaimClient) DeleteOneID(id int) *ClaimDeleteOne {
	builder := c.Delete().Where(claim.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClaimDeleteOne{builder}
}

// Query returns a query builder for Claim.
func (c *ClaimClient) Query() *ClaimQuery {
	return &ClaimQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClaim},
		inters: c.Interceptors(),
	}
}

// Get returns a Claim entity by its id.
func (c *ClaimClient) Get(ctx context.Context, id int) (*Claim, error) {
	return c.Query().Where(claim.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClaimClient) GetX(ctx context.Context, id int) *Claim {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClaimGroups queries the claim_groups edge of a Claim.
func (c *ClaimClient) QueryClaimGroups(cl *Claim) *ClaimGroupQuery {
	query := (&ClaimGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(claim.Table, claim.FieldID, id),
			sqlgraph.To(claimgroup.Table, claimgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, claim.ClaimGroupsTable, claim.ClaimGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClaimClient) Hooks() []Hook {
	return c.hooks.Claim
}

// Interceptors returns the client interceptors.
func (c *ClaimClient) Interceptors() []Interceptor {
	return c.inters.Claim
}

func (c *ClaimClient) mutate(ctx context.Context, m *ClaimMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClaimCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClaimUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClaimDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Claim mutation op: %q", m.Op())
	}
}

// ClaimGroupClient is a client for the ClaimGroup schema.
type ClaimGroupClient struct {
	config
}

// NewClaimGroupClient returns a client for the ClaimGroup from the given config.
func NewClaimGroupClient(c config) *ClaimGroupClient {
	return &ClaimGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `claimgroup.Hooks(f(g(h())))`.
func (c *ClaimGroupClient) Use(hooks ...Hook) {
	c.hooks.ClaimGroup = append(c.hooks.ClaimGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `claimgroup.Intercept(f(g(h())))`.
func (c *ClaimGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClaimGroup = append(c.inters.ClaimGroup, interceptors...)
}

// Create returns a builder for creating a ClaimGroup entity.
func (c *ClaimGroupClient) Create() *ClaimGroupCreate {
	mutation := newClaimGroupMutation(c.config, OpCreate)
	return &ClaimGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClaimGroup entities.
func (c *ClaimGroupClient) CreateBulk(builders ...*ClaimGroupCreate) *ClaimGroupCreateBulk {
	return &ClaimGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClaimGroupClient) MapCreateBulk(slice any, setFunc func(*ClaimGroupCreate, int)) *ClaimGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClaimGroupCreateBulk{err: fmt.Errorf("calling to ClaimGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClaimGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClaimGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClaimGroup.
func (c *ClaimGroupClient) Update() *ClaimGroupUpdate {
	mutation := newClaimGroupMutation(c.config, OpUpdate)
	return &ClaimGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClaimGroupClient) UpdateOne(cg *ClaimGroup) *ClaimGroupUpdateOne {
	mutation := newClaimGroupMutation(c.config, OpUpdateOne, withClaimGroup(cg))
	return &ClaimGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClaimGroupClient) UpdateOneID(id int) *ClaimGroupUpdateOne {
	mutation := newClaimGroupMutation(c.config, OpUpdateOne, withClaimGroupID(id))
	return &ClaimGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClaimGroup.
func (c *ClaimGroupClient) Delete() *ClaimGroupDelete {
	mutation := newClaimGroupMutation(c.config, OpDelete)
	return &ClaimGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClaimGroupClient) DeleteOne(cg *ClaimGroup) *ClaimGroupDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClaimGroupClient) DeleteOneID(id int) *ClaimGroupDeleteOne {
	builder := c.Delete().Where(claimgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClaimGroupDeleteOne{builder}
}

// Query returns a query builder for ClaimGroup.
func (c *ClaimGroupClient) Query() *ClaimGroupQuery {
	return &ClaimGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClaimGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a ClaimGroup entity by its id.
func (c *ClaimGroupClient) Get(ctx context.Context, id int) (*ClaimGroup, error) {
	return c.Query().Where(claimgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClaimGroupClient) GetX(ctx context.Context, id int) *ClaimGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a ClaimGroup.
func (c *ClaimGroupClient) QueryUsers(cg *ClaimGroup) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(claimgroup.Table, claimgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, claimgroup.UsersTable, claimgroup.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupLinks queries the group_links edge of a ClaimGroup.
func (c *ClaimGroupClient) QueryGroupLinks(cg *ClaimGroup) *GroupLinkQuery {
	query := (&GroupLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(claimgroup.Table, claimgroup.FieldID, id),
			sqlgraph.To(grouplink.Table, grouplink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, claimgroup.GroupLinksTable, claimgroup.GroupLinksColumn),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClaims queries the claims edge of a ClaimGroup.
func (c *ClaimGroupClient) QueryClaims(cg *ClaimGroup) *ClaimQuery {
	query := (&ClaimClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(claimgroup.Table, claimgroup.FieldID, id),
			sqlgraph.To(claim.Table, claim.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, claimgroup.ClaimsTable, claimgroup.ClaimsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClaimGroupClient) Hooks() []Hook {
	return c.hooks.ClaimGroup
}

// Interceptors returns the client interceptors.
func (c *ClaimGroupClient) Interceptors() []Interceptor {
	return c.inters.ClaimGroup
}

func (c *ClaimGroupClient) mutate(ctx context.Context, m *ClaimGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClaimGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClaimGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClaimGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClaimGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ClaimGroup mutation op: %q", m.Op())
	}
}

// GroupLinkClient is a client for the GroupLink schema.
type GroupLinkClient struct {
	config
}

// NewGroupLinkClient returns a client for the GroupLink from the given config.
func NewGroupLinkClient(c config) *GroupLinkClient {
	return &GroupLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grouplink.Hooks(f(g(h())))`.
func (c *GroupLinkClient) Use(hooks ...Hook) {
	c.hooks.GroupLink = append(c.hooks.GroupLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grouplink.Intercept(f(g(h())))`.
func (c *GroupLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupLink = append(c.inters.GroupLink, interceptors...)
}

// Create returns a builder for creating a GroupLink entity.
func (c *GroupLinkClient) Create() *GroupLinkCreate {
	mutation := newGroupLinkMutation(c.config, OpCreate)
	return &GroupLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupLink entities.
func (c *GroupLinkClient) CreateBulk(builders ...*GroupLinkCreate) *GroupLinkCreateBulk {
	return &GroupLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupLinkClient) MapCreateBulk(slice any, setFunc func(*GroupLinkCreate, int)) *GroupLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupLinkCreateBulk{err: fmt.Errorf("calling to GroupLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupLink.
func (c *GroupLinkClient) Update() *GroupLinkUpdate {
	mutation := newGroupLinkMutation(c.config, OpUpdate)
	return &GroupLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupLinkClient) UpdateOne(gl *GroupLink) *GroupLinkUpdateOne {
	mutation := newGroupLinkMutation(c.config, OpUpdateOne, withGroupLink(gl))
	return &GroupLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupLinkClient) UpdateOneID(id int) *GroupLinkUpdateOne {
	mutation := newGroupLinkMutation(c.config, OpUpdateOne, withGroupLinkID(id))
	return &GroupLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupLink.
func (c *GroupLinkClient) Delete() *GroupLinkDelete {
	mutation := newGroupLinkMutation(c.config, OpDelete)
	return &GroupLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupLinkClient) DeleteOne(gl *GroupLink) *GroupLinkDeleteOne {
	return c.DeleteOneID(gl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupLinkClient) DeleteOneID(id int) *GroupLinkDeleteOne {
	builder := c.Delete().Where(grouplink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupLinkDeleteOne{builder}
}

// Query returns a query builder for GroupLink.
func (c *GroupLinkClient) Query() *GroupLinkQuery {
	return &GroupLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupLink},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupLink entity by its id.
func (c *GroupLinkClient) Get(ctx context.Context, id int) (*GroupLink, error) {
	return c.Query().Where(grouplink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupLinkClient) GetX(ctx context.Context, id int) *GroupLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClaimGroup queries the claim_group edge of a GroupLink.
func (c *GroupLinkClient) QueryClaimGroup(gl *GroupLink) *ClaimGroupQuery {
	query := (&ClaimGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grouplink.Table, grouplink.FieldID, id),
			sqlgraph.To(claimgroup.Table, claimgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, grouplink.ClaimGroupTable, grouplink.ClaimGroupColumn),
		)
		fromV = sqlgraph.Neighbors(gl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupLinkClient) Hooks() []Hook {
	return c.hooks.GroupLink
}

// Interceptors returns the client interceptors.
func (c *GroupLinkClient) Interceptors() []Interceptor {
	return c.inters.GroupLink
}

func (c *GroupLinkClient) mutate(ctx context.Context, m *GroupLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupLink mutation op: %q", m.Op())
	}
}

// PrivateKeyClient is a client for the PrivateKey schema.
type PrivateKeyClient struct {
	config
}

// NewPrivateKeyClient returns a client for the PrivateKey from the given config.
func NewPrivateKeyClient(c config) *PrivateKeyClient {
	return &PrivateKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `privatekey.Hooks(f(g(h())))`.
func (c *PrivateKeyClient) Use(hooks ...Hook) {
	c.hooks.PrivateKey = append(c.hooks.PrivateKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `privatekey.Intercept(f(g(h())))`.
func (c *PrivateKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrivateKey = append(c.inters.PrivateKey, interceptors...)
}

// Create returns a builder for creating a PrivateKey entity.
func (c *PrivateKeyClient) Create() *PrivateKeyCreate {
	mutation := newPrivateKeyMutation(c.config, OpCreate)
	return &PrivateKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrivateKey entities.
func (c *PrivateKeyClient) CreateBulk(builders ...*PrivateKeyCreate) *PrivateKeyCreateBulk {
	return &PrivateKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrivateKeyClient) MapCreateBulk(slice any, setFunc func(*PrivateKeyCreate, int)) *PrivateKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrivateKeyCreateBulk{err: fmt.Errorf("calling to PrivateKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrivateKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrivateKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrivateKey.
func (c *PrivateKeyClient) Update() *PrivateKeyUpdate {
	mutation := newPrivateKeyMutation(c.config, OpUpdate)
	return &PrivateKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrivateKeyClient) UpdateOne(pk *PrivateKey) *PrivateKeyUpdateOne {
	mutation := newPrivateKeyMutation(c.config, OpUpdateOne, withPrivateKey(pk))
	return &PrivateKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrivateKeyClient) UpdateOneID(id int) *PrivateKeyUpdateOne {
	mutation := newPrivateKeyMutation(c.config, OpUpdateOne, withPrivateKeyID(id))
	return &PrivateKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrivateKey.
func (c *PrivateKeyClient) Delete() *PrivateKeyDelete {
	mutation := newPrivateKeyMutation(c.config, OpDelete)
	return &PrivateKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrivateKeyClient) DeleteOne(pk *PrivateKey) *PrivateKeyDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrivateKeyClient) DeleteOneID(id int) *PrivateKeyDeleteOne {
	builder := c.Delete().Where(privatekey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrivateKeyDeleteOne{builder}
}

// Query returns a query builder for PrivateKey.
func (c *PrivateKeyClient) Query() *PrivateKeyQuery {
	return &PrivateKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrivateKey},
		inters: c.Interceptors(),
	}
}

// Get returns a PrivateKey entity by its id.
func (c *PrivateKeyClient) Get(ctx context.Context, id int) (*PrivateKey, error) {
	return c.Query().Where(privatekey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrivateKeyClient) GetX(ctx context.Context, id int) *PrivateKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PrivateKeyClient) Hooks() []Hook {
	return c.hooks.PrivateKey
}

// Interceptors returns the client interceptors.
func (c *PrivateKeyClient) Interceptors() []Interceptor {
	return c.inters.PrivateKey
}

func (c *PrivateKeyClient) mutate(ctx context.Context, m *PrivateKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrivateKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrivateKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrivateKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrivateKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrivateKey mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClaimGroups queries the claim_groups edge of a User.
func (c *UserClient) QueryClaimGroups(u *User) *ClaimGroupQuery {
	query := (&ClaimGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(claimgroup.Table, claimgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.ClaimGroupsTable, user.ClaimGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Claim, ClaimGroup, GroupLink, PrivateKey, User []ent.Hook
	}
	inters struct {
		Claim, ClaimGroup, GroupLink, PrivateKey, User []ent.Interceptor
	}
)
