// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/privatekey"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrivateKeyCreate is the builder for creating a PrivateKey entity.
type PrivateKeyCreate struct {
	config
	mutation *PrivateKeyMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (pkc *PrivateKeyCreate) SetText(s string) *PrivateKeyCreate {
	pkc.mutation.SetText(s)
	return pkc
}

// SetExpires sets the "expires" field.
func (pkc *PrivateKeyCreate) SetExpires(t time.Time) *PrivateKeyCreate {
	pkc.mutation.SetExpires(t)
	return pkc
}

// SetRenews sets the "renews" field.
func (pkc *PrivateKeyCreate) SetRenews(t time.Time) *PrivateKeyCreate {
	pkc.mutation.SetRenews(t)
	return pkc
}

// Mutation returns the PrivateKeyMutation object of the builder.
func (pkc *PrivateKeyCreate) Mutation() *PrivateKeyMutation {
	return pkc.mutation
}

// Save creates the PrivateKey in the database.
func (pkc *PrivateKeyCreate) Save(ctx context.Context) (*PrivateKey, error) {
	return withHooks(ctx, pkc.sqlSave, pkc.mutation, pkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pkc *PrivateKeyCreate) SaveX(ctx context.Context) *PrivateKey {
	v, err := pkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkc *PrivateKeyCreate) Exec(ctx context.Context) error {
	_, err := pkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkc *PrivateKeyCreate) ExecX(ctx context.Context) {
	if err := pkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pkc *PrivateKeyCreate) check() error {
	if _, ok := pkc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "PrivateKey.text"`)}
	}
	if _, ok := pkc.mutation.Expires(); !ok {
		return &ValidationError{Name: "expires", err: errors.New(`ent: missing required field "PrivateKey.expires"`)}
	}
	if _, ok := pkc.mutation.Renews(); !ok {
		return &ValidationError{Name: "renews", err: errors.New(`ent: missing required field "PrivateKey.renews"`)}
	}
	return nil
}

func (pkc *PrivateKeyCreate) sqlSave(ctx context.Context) (*PrivateKey, error) {
	if err := pkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pkc.mutation.id = &_node.ID
	pkc.mutation.done = true
	return _node, nil
}

func (pkc *PrivateKeyCreate) createSpec() (*PrivateKey, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivateKey{config: pkc.config}
		_spec = sqlgraph.NewCreateSpec(privatekey.Table, sqlgraph.NewFieldSpec(privatekey.FieldID, field.TypeInt))
	)
	if value, ok := pkc.mutation.Text(); ok {
		_spec.SetField(privatekey.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := pkc.mutation.Expires(); ok {
		_spec.SetField(privatekey.FieldExpires, field.TypeTime, value)
		_node.Expires = value
	}
	if value, ok := pkc.mutation.Renews(); ok {
		_spec.SetField(privatekey.FieldRenews, field.TypeTime, value)
		_node.Renews = value
	}
	return _node, _spec
}

// PrivateKeyCreateBulk is the builder for creating many PrivateKey entities in bulk.
type PrivateKeyCreateBulk struct {
	config
	err      error
	builders []*PrivateKeyCreate
}

// Save creates the PrivateKey entities in the database.
func (pkcb *PrivateKeyCreateBulk) Save(ctx context.Context) ([]*PrivateKey, error) {
	if pkcb.err != nil {
		return nil, pkcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pkcb.builders))
	nodes := make([]*PrivateKey, len(pkcb.builders))
	mutators := make([]Mutator, len(pkcb.builders))
	for i := range pkcb.builders {
		func(i int, root context.Context) {
			builder := pkcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivateKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pkcb *PrivateKeyCreateBulk) SaveX(ctx context.Context) []*PrivateKey {
	v, err := pkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkcb *PrivateKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := pkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkcb *PrivateKeyCreateBulk) ExecX(ctx context.Context) {
	if err := pkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
