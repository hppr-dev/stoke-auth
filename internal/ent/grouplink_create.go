// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupLinkCreate is the builder for creating a GroupLink entity.
type GroupLinkCreate struct {
	config
	mutation *GroupLinkMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (glc *GroupLinkCreate) SetType(s string) *GroupLinkCreate {
	glc.mutation.SetType(s)
	return glc
}

// SetResourceSpec sets the "resource_spec" field.
func (glc *GroupLinkCreate) SetResourceSpec(s string) *GroupLinkCreate {
	glc.mutation.SetResourceSpec(s)
	return glc
}

// SetClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID.
func (glc *GroupLinkCreate) SetClaimGroupID(id int) *GroupLinkCreate {
	glc.mutation.SetClaimGroupID(id)
	return glc
}

// SetNillableClaimGroupID sets the "claim_group" edge to the ClaimGroup entity by ID if the given value is not nil.
func (glc *GroupLinkCreate) SetNillableClaimGroupID(id *int) *GroupLinkCreate {
	if id != nil {
		glc = glc.SetClaimGroupID(*id)
	}
	return glc
}

// SetClaimGroup sets the "claim_group" edge to the ClaimGroup entity.
func (glc *GroupLinkCreate) SetClaimGroup(c *ClaimGroup) *GroupLinkCreate {
	return glc.SetClaimGroupID(c.ID)
}

// Mutation returns the GroupLinkMutation object of the builder.
func (glc *GroupLinkCreate) Mutation() *GroupLinkMutation {
	return glc.mutation
}

// Save creates the GroupLink in the database.
func (glc *GroupLinkCreate) Save(ctx context.Context) (*GroupLink, error) {
	return withHooks(ctx, glc.sqlSave, glc.mutation, glc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (glc *GroupLinkCreate) SaveX(ctx context.Context) *GroupLink {
	v, err := glc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glc *GroupLinkCreate) Exec(ctx context.Context) error {
	_, err := glc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glc *GroupLinkCreate) ExecX(ctx context.Context) {
	if err := glc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glc *GroupLinkCreate) check() error {
	if _, ok := glc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "GroupLink.type"`)}
	}
	if _, ok := glc.mutation.ResourceSpec(); !ok {
		return &ValidationError{Name: "resource_spec", err: errors.New(`ent: missing required field "GroupLink.resource_spec"`)}
	}
	return nil
}

func (glc *GroupLinkCreate) sqlSave(ctx context.Context) (*GroupLink, error) {
	if err := glc.check(); err != nil {
		return nil, err
	}
	_node, _spec := glc.createSpec()
	if err := sqlgraph.CreateNode(ctx, glc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	glc.mutation.id = &_node.ID
	glc.mutation.done = true
	return _node, nil
}

func (glc *GroupLinkCreate) createSpec() (*GroupLink, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupLink{config: glc.config}
		_spec = sqlgraph.NewCreateSpec(grouplink.Table, sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt))
	)
	if value, ok := glc.mutation.GetType(); ok {
		_spec.SetField(grouplink.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := glc.mutation.ResourceSpec(); ok {
		_spec.SetField(grouplink.FieldResourceSpec, field.TypeString, value)
		_node.ResourceSpec = value
	}
	if nodes := glc.mutation.ClaimGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouplink.ClaimGroupTable,
			Columns: []string{grouplink.ClaimGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.claim_group_group_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupLinkCreateBulk is the builder for creating many GroupLink entities in bulk.
type GroupLinkCreateBulk struct {
	config
	err      error
	builders []*GroupLinkCreate
}

// Save creates the GroupLink entities in the database.
func (glcb *GroupLinkCreateBulk) Save(ctx context.Context) ([]*GroupLink, error) {
	if glcb.err != nil {
		return nil, glcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(glcb.builders))
	nodes := make([]*GroupLink, len(glcb.builders))
	mutators := make([]Mutator, len(glcb.builders))
	for i := range glcb.builders {
		func(i int, root context.Context) {
			builder := glcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, glcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, glcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, glcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (glcb *GroupLinkCreateBulk) SaveX(ctx context.Context) []*GroupLink {
	v, err := glcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glcb *GroupLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := glcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glcb *GroupLinkCreateBulk) ExecX(ctx context.Context) {
	if err := glcb.Exec(ctx); err != nil {
		panic(err)
	}
}
