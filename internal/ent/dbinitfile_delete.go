// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stoke/internal/ent/dbinitfile"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DBInitFileDelete is the builder for deleting a DBInitFile entity.
type DBInitFileDelete struct {
	config
	hooks    []Hook
	mutation *DBInitFileMutation
}

// Where appends a list predicates to the DBInitFileDelete builder.
func (difd *DBInitFileDelete) Where(ps ...predicate.DBInitFile) *DBInitFileDelete {
	difd.mutation.Where(ps...)
	return difd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (difd *DBInitFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, difd.sqlExec, difd.mutation, difd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (difd *DBInitFileDelete) ExecX(ctx context.Context) int {
	n, err := difd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (difd *DBInitFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(dbinitfile.Table, sqlgraph.NewFieldSpec(dbinitfile.FieldID, field.TypeInt))
	if ps := difd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, difd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	difd.mutation.done = true
	return affected, err
}

// DBInitFileDeleteOne is the builder for deleting a single DBInitFile entity.
type DBInitFileDeleteOne struct {
	difd *DBInitFileDelete
}

// Where appends a list predicates to the DBInitFileDelete builder.
func (difdo *DBInitFileDeleteOne) Where(ps ...predicate.DBInitFile) *DBInitFileDeleteOne {
	difdo.difd.mutation.Where(ps...)
	return difdo
}

// Exec executes the deletion query.
func (difdo *DBInitFileDeleteOne) Exec(ctx context.Context) error {
	n, err := difdo.difd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dbinitfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (difdo *DBInitFileDeleteOne) ExecX(ctx context.Context) {
	if err := difdo.Exec(ctx); err != nil {
		panic(err)
	}
}
