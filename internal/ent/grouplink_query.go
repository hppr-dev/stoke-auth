// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupLinkQuery is the builder for querying GroupLink entities.
type GroupLinkQuery struct {
	config
	ctx            *QueryContext
	order          []grouplink.OrderOption
	inters         []Interceptor
	predicates     []predicate.GroupLink
	withClaimGroup *ClaimGroupQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupLinkQuery builder.
func (glq *GroupLinkQuery) Where(ps ...predicate.GroupLink) *GroupLinkQuery {
	glq.predicates = append(glq.predicates, ps...)
	return glq
}

// Limit the number of records to be returned by this query.
func (glq *GroupLinkQuery) Limit(limit int) *GroupLinkQuery {
	glq.ctx.Limit = &limit
	return glq
}

// Offset to start from.
func (glq *GroupLinkQuery) Offset(offset int) *GroupLinkQuery {
	glq.ctx.Offset = &offset
	return glq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (glq *GroupLinkQuery) Unique(unique bool) *GroupLinkQuery {
	glq.ctx.Unique = &unique
	return glq
}

// Order specifies how the records should be ordered.
func (glq *GroupLinkQuery) Order(o ...grouplink.OrderOption) *GroupLinkQuery {
	glq.order = append(glq.order, o...)
	return glq
}

// QueryClaimGroup chains the current query on the "claim_group" edge.
func (glq *GroupLinkQuery) QueryClaimGroup() *ClaimGroupQuery {
	query := (&ClaimGroupClient{config: glq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := glq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := glq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(grouplink.Table, grouplink.FieldID, selector),
			sqlgraph.To(claimgroup.Table, claimgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, grouplink.ClaimGroupTable, grouplink.ClaimGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(glq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroupLink entity from the query.
// Returns a *NotFoundError when no GroupLink was found.
func (glq *GroupLinkQuery) First(ctx context.Context) (*GroupLink, error) {
	nodes, err := glq.Limit(1).All(setContextOp(ctx, glq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{grouplink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (glq *GroupLinkQuery) FirstX(ctx context.Context) *GroupLink {
	node, err := glq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GroupLink ID from the query.
// Returns a *NotFoundError when no GroupLink ID was found.
func (glq *GroupLinkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = glq.Limit(1).IDs(setContextOp(ctx, glq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{grouplink.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (glq *GroupLinkQuery) FirstIDX(ctx context.Context) int {
	id, err := glq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GroupLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroupLink entity is found.
// Returns a *NotFoundError when no GroupLink entities are found.
func (glq *GroupLinkQuery) Only(ctx context.Context) (*GroupLink, error) {
	nodes, err := glq.Limit(2).All(setContextOp(ctx, glq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{grouplink.Label}
	default:
		return nil, &NotSingularError{grouplink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (glq *GroupLinkQuery) OnlyX(ctx context.Context) *GroupLink {
	node, err := glq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GroupLink ID in the query.
// Returns a *NotSingularError when more than one GroupLink ID is found.
// Returns a *NotFoundError when no entities are found.
func (glq *GroupLinkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = glq.Limit(2).IDs(setContextOp(ctx, glq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{grouplink.Label}
	default:
		err = &NotSingularError{grouplink.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (glq *GroupLinkQuery) OnlyIDX(ctx context.Context) int {
	id, err := glq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroupLinks.
func (glq *GroupLinkQuery) All(ctx context.Context) ([]*GroupLink, error) {
	ctx = setContextOp(ctx, glq.ctx, "All")
	if err := glq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GroupLink, *GroupLinkQuery]()
	return withInterceptors[[]*GroupLink](ctx, glq, qr, glq.inters)
}

// AllX is like All, but panics if an error occurs.
func (glq *GroupLinkQuery) AllX(ctx context.Context) []*GroupLink {
	nodes, err := glq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GroupLink IDs.
func (glq *GroupLinkQuery) IDs(ctx context.Context) (ids []int, err error) {
	if glq.ctx.Unique == nil && glq.path != nil {
		glq.Unique(true)
	}
	ctx = setContextOp(ctx, glq.ctx, "IDs")
	if err = glq.Select(grouplink.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (glq *GroupLinkQuery) IDsX(ctx context.Context) []int {
	ids, err := glq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (glq *GroupLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, glq.ctx, "Count")
	if err := glq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, glq, querierCount[*GroupLinkQuery](), glq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (glq *GroupLinkQuery) CountX(ctx context.Context) int {
	count, err := glq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (glq *GroupLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, glq.ctx, "Exist")
	switch _, err := glq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (glq *GroupLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := glq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (glq *GroupLinkQuery) Clone() *GroupLinkQuery {
	if glq == nil {
		return nil
	}
	return &GroupLinkQuery{
		config:         glq.config,
		ctx:            glq.ctx.Clone(),
		order:          append([]grouplink.OrderOption{}, glq.order...),
		inters:         append([]Interceptor{}, glq.inters...),
		predicates:     append([]predicate.GroupLink{}, glq.predicates...),
		withClaimGroup: glq.withClaimGroup.Clone(),
		// clone intermediate query.
		sql:  glq.sql.Clone(),
		path: glq.path,
	}
}

// WithClaimGroup tells the query-builder to eager-load the nodes that are connected to
// the "claim_group" edge. The optional arguments are used to configure the query builder of the edge.
func (glq *GroupLinkQuery) WithClaimGroup(opts ...func(*ClaimGroupQuery)) *GroupLinkQuery {
	query := (&ClaimGroupClient{config: glq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	glq.withClaimGroup = query
	return glq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupLink.Query().
//		GroupBy(grouplink.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (glq *GroupLinkQuery) GroupBy(field string, fields ...string) *GroupLinkGroupBy {
	glq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupLinkGroupBy{build: glq}
	grbuild.flds = &glq.ctx.Fields
	grbuild.label = grouplink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.GroupLink.Query().
//		Select(grouplink.FieldType).
//		Scan(ctx, &v)
func (glq *GroupLinkQuery) Select(fields ...string) *GroupLinkSelect {
	glq.ctx.Fields = append(glq.ctx.Fields, fields...)
	sbuild := &GroupLinkSelect{GroupLinkQuery: glq}
	sbuild.label = grouplink.Label
	sbuild.flds, sbuild.scan = &glq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupLinkSelect configured with the given aggregations.
func (glq *GroupLinkQuery) Aggregate(fns ...AggregateFunc) *GroupLinkSelect {
	return glq.Select().Aggregate(fns...)
}

func (glq *GroupLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range glq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, glq); err != nil {
				return err
			}
		}
	}
	for _, f := range glq.ctx.Fields {
		if !grouplink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if glq.path != nil {
		prev, err := glq.path(ctx)
		if err != nil {
			return err
		}
		glq.sql = prev
	}
	return nil
}

func (glq *GroupLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroupLink, error) {
	var (
		nodes       = []*GroupLink{}
		withFKs     = glq.withFKs
		_spec       = glq.querySpec()
		loadedTypes = [1]bool{
			glq.withClaimGroup != nil,
		}
	)
	if glq.withClaimGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, grouplink.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GroupLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GroupLink{config: glq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, glq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := glq.withClaimGroup; query != nil {
		if err := glq.loadClaimGroup(ctx, query, nodes, nil,
			func(n *GroupLink, e *ClaimGroup) { n.Edges.ClaimGroup = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (glq *GroupLinkQuery) loadClaimGroup(ctx context.Context, query *ClaimGroupQuery, nodes []*GroupLink, init func(*GroupLink), assign func(*GroupLink, *ClaimGroup)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GroupLink)
	for i := range nodes {
		if nodes[i].claim_group_group_links == nil {
			continue
		}
		fk := *nodes[i].claim_group_group_links
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(claimgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "claim_group_group_links" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (glq *GroupLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := glq.querySpec()
	_spec.Node.Columns = glq.ctx.Fields
	if len(glq.ctx.Fields) > 0 {
		_spec.Unique = glq.ctx.Unique != nil && *glq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, glq.driver, _spec)
}

func (glq *GroupLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(grouplink.Table, grouplink.Columns, sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt))
	_spec.From = glq.sql
	if unique := glq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if glq.path != nil {
		_spec.Unique = true
	}
	if fields := glq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouplink.FieldID)
		for i := range fields {
			if fields[i] != grouplink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := glq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := glq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := glq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := glq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (glq *GroupLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(glq.driver.Dialect())
	t1 := builder.Table(grouplink.Table)
	columns := glq.ctx.Fields
	if len(columns) == 0 {
		columns = grouplink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if glq.sql != nil {
		selector = glq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if glq.ctx.Unique != nil && *glq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range glq.predicates {
		p(selector)
	}
	for _, p := range glq.order {
		p(selector)
	}
	if offset := glq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := glq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupLinkGroupBy is the group-by builder for GroupLink entities.
type GroupLinkGroupBy struct {
	selector
	build *GroupLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (glgb *GroupLinkGroupBy) Aggregate(fns ...AggregateFunc) *GroupLinkGroupBy {
	glgb.fns = append(glgb.fns, fns...)
	return glgb
}

// Scan applies the selector query and scans the result into the given value.
func (glgb *GroupLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, glgb.build.ctx, "GroupBy")
	if err := glgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupLinkQuery, *GroupLinkGroupBy](ctx, glgb.build, glgb, glgb.build.inters, v)
}

func (glgb *GroupLinkGroupBy) sqlScan(ctx context.Context, root *GroupLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(glgb.fns))
	for _, fn := range glgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*glgb.flds)+len(glgb.fns))
		for _, f := range *glgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*glgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := glgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupLinkSelect is the builder for selecting fields of GroupLink entities.
type GroupLinkSelect struct {
	*GroupLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gls *GroupLinkSelect) Aggregate(fns ...AggregateFunc) *GroupLinkSelect {
	gls.fns = append(gls.fns, fns...)
	return gls
}

// Scan applies the selector query and scans the result into the given value.
func (gls *GroupLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gls.ctx, "Select")
	if err := gls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupLinkQuery, *GroupLinkSelect](ctx, gls.GroupLinkQuery, gls, gls.inters, v)
}

func (gls *GroupLinkSelect) sqlScan(ctx context.Context, root *GroupLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gls.fns))
	for _, fn := range gls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
