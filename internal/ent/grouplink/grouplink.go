// Code generated by ent, DO NOT EDIT.

package grouplink

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grouplink type in the database.
	Label = "group_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldResourceSpec holds the string denoting the resource_spec field in the database.
	FieldResourceSpec = "resource_spec"
	// EdgeClaimGroups holds the string denoting the claim_groups edge name in mutations.
	EdgeClaimGroups = "claim_groups"
	// Table holds the table name of the grouplink in the database.
	Table = "group_links"
	// ClaimGroupsTable is the table that holds the claim_groups relation/edge.
	ClaimGroupsTable = "group_links"
	// ClaimGroupsInverseTable is the table name for the ClaimGroup entity.
	// It exists in this package in order to avoid circular dependency with the "claimgroup" package.
	ClaimGroupsInverseTable = "claim_groups"
	// ClaimGroupsColumn is the table column denoting the claim_groups relation/edge.
	ClaimGroupsColumn = "claim_group_group_links"
)

// Columns holds all SQL columns for grouplink fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldResourceSpec,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "group_links"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"claim_group_group_links",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GroupLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByResourceSpec orders the results by the resource_spec field.
func ByResourceSpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceSpec, opts...).ToFunc()
}

// ByClaimGroupsField orders the results by claim_groups field.
func ByClaimGroupsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClaimGroupsStep(), sql.OrderByField(field, opts...))
	}
}
func newClaimGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClaimGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClaimGroupsTable, ClaimGroupsColumn),
	)
}
