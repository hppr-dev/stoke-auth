// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claim"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClaimUpdate is the builder for updating Claim entities.
type ClaimUpdate struct {
	config
	hooks    []Hook
	mutation *ClaimMutation
}

// Where appends a list predicates to the ClaimUpdate builder.
func (cu *ClaimUpdate) Where(ps ...predicate.Claim) *ClaimUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ClaimUpdate) SetName(s string) *ClaimUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ClaimUpdate) SetNillableName(s *string) *ClaimUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetShortName sets the "short_name" field.
func (cu *ClaimUpdate) SetShortName(s string) *ClaimUpdate {
	cu.mutation.SetShortName(s)
	return cu
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (cu *ClaimUpdate) SetNillableShortName(s *string) *ClaimUpdate {
	if s != nil {
		cu.SetShortName(*s)
	}
	return cu
}

// SetValue sets the "value" field.
func (cu *ClaimUpdate) SetValue(s string) *ClaimUpdate {
	cu.mutation.SetValue(s)
	return cu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cu *ClaimUpdate) SetNillableValue(s *string) *ClaimUpdate {
	if s != nil {
		cu.SetValue(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ClaimUpdate) SetDescription(s string) *ClaimUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ClaimUpdate) SetNillableDescription(s *string) *ClaimUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// AddClaimGroupIDs adds the "claim_groups" edge to the ClaimGroup entity by IDs.
func (cu *ClaimUpdate) AddClaimGroupIDs(ids ...int) *ClaimUpdate {
	cu.mutation.AddClaimGroupIDs(ids...)
	return cu
}

// AddClaimGroups adds the "claim_groups" edges to the ClaimGroup entity.
func (cu *ClaimUpdate) AddClaimGroups(c ...*ClaimGroup) *ClaimUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClaimGroupIDs(ids...)
}

// Mutation returns the ClaimMutation object of the builder.
func (cu *ClaimUpdate) Mutation() *ClaimMutation {
	return cu.mutation
}

// ClearClaimGroups clears all "claim_groups" edges to the ClaimGroup entity.
func (cu *ClaimUpdate) ClearClaimGroups() *ClaimUpdate {
	cu.mutation.ClearClaimGroups()
	return cu
}

// RemoveClaimGroupIDs removes the "claim_groups" edge to ClaimGroup entities by IDs.
func (cu *ClaimUpdate) RemoveClaimGroupIDs(ids ...int) *ClaimUpdate {
	cu.mutation.RemoveClaimGroupIDs(ids...)
	return cu
}

// RemoveClaimGroups removes "claim_groups" edges to ClaimGroup entities.
func (cu *ClaimUpdate) RemoveClaimGroups(c ...*ClaimGroup) *ClaimUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClaimGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClaimUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClaimUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClaimUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClaimUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClaimUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(claim.Table, claim.Columns, sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(claim.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ShortName(); ok {
		_spec.SetField(claim.FieldShortName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.SetField(claim.FieldValue, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(claim.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.ClaimGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClaimGroupsIDs(); len(nodes) > 0 && !cu.mutation.ClaimGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClaimGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{claim.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClaimUpdateOne is the builder for updating a single Claim entity.
type ClaimUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClaimMutation
}

// SetName sets the "name" field.
func (cuo *ClaimUpdateOne) SetName(s string) *ClaimUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ClaimUpdateOne) SetNillableName(s *string) *ClaimUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetShortName sets the "short_name" field.
func (cuo *ClaimUpdateOne) SetShortName(s string) *ClaimUpdateOne {
	cuo.mutation.SetShortName(s)
	return cuo
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (cuo *ClaimUpdateOne) SetNillableShortName(s *string) *ClaimUpdateOne {
	if s != nil {
		cuo.SetShortName(*s)
	}
	return cuo
}

// SetValue sets the "value" field.
func (cuo *ClaimUpdateOne) SetValue(s string) *ClaimUpdateOne {
	cuo.mutation.SetValue(s)
	return cuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cuo *ClaimUpdateOne) SetNillableValue(s *string) *ClaimUpdateOne {
	if s != nil {
		cuo.SetValue(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ClaimUpdateOne) SetDescription(s string) *ClaimUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ClaimUpdateOne) SetNillableDescription(s *string) *ClaimUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// AddClaimGroupIDs adds the "claim_groups" edge to the ClaimGroup entity by IDs.
func (cuo *ClaimUpdateOne) AddClaimGroupIDs(ids ...int) *ClaimUpdateOne {
	cuo.mutation.AddClaimGroupIDs(ids...)
	return cuo
}

// AddClaimGroups adds the "claim_groups" edges to the ClaimGroup entity.
func (cuo *ClaimUpdateOne) AddClaimGroups(c ...*ClaimGroup) *ClaimUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClaimGroupIDs(ids...)
}

// Mutation returns the ClaimMutation object of the builder.
func (cuo *ClaimUpdateOne) Mutation() *ClaimMutation {
	return cuo.mutation
}

// ClearClaimGroups clears all "claim_groups" edges to the ClaimGroup entity.
func (cuo *ClaimUpdateOne) ClearClaimGroups() *ClaimUpdateOne {
	cuo.mutation.ClearClaimGroups()
	return cuo
}

// RemoveClaimGroupIDs removes the "claim_groups" edge to ClaimGroup entities by IDs.
func (cuo *ClaimUpdateOne) RemoveClaimGroupIDs(ids ...int) *ClaimUpdateOne {
	cuo.mutation.RemoveClaimGroupIDs(ids...)
	return cuo
}

// RemoveClaimGroups removes "claim_groups" edges to ClaimGroup entities.
func (cuo *ClaimUpdateOne) RemoveClaimGroups(c ...*ClaimGroup) *ClaimUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClaimGroupIDs(ids...)
}

// Where appends a list predicates to the ClaimUpdate builder.
func (cuo *ClaimUpdateOne) Where(ps ...predicate.Claim) *ClaimUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClaimUpdateOne) Select(field string, fields ...string) *ClaimUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Claim entity.
func (cuo *ClaimUpdateOne) Save(ctx context.Context) (*Claim, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClaimUpdateOne) SaveX(ctx context.Context) *Claim {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClaimUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClaimUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClaimUpdateOne) sqlSave(ctx context.Context) (_node *Claim, err error) {
	_spec := sqlgraph.NewUpdateSpec(claim.Table, claim.Columns, sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Claim.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, claim.FieldID)
		for _, f := range fields {
			if !claim.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != claim.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(claim.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ShortName(); ok {
		_spec.SetField(claim.FieldShortName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.SetField(claim.FieldValue, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(claim.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.ClaimGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClaimGroupsIDs(); len(nodes) > 0 && !cuo.mutation.ClaimGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClaimGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claim.ClaimGroupsTable,
			Columns: claim.ClaimGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Claim{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{claim.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
