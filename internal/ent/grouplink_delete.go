// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupLinkDelete is the builder for deleting a GroupLink entity.
type GroupLinkDelete struct {
	config
	hooks    []Hook
	mutation *GroupLinkMutation
}

// Where appends a list predicates to the GroupLinkDelete builder.
func (gld *GroupLinkDelete) Where(ps ...predicate.GroupLink) *GroupLinkDelete {
	gld.mutation.Where(ps...)
	return gld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gld *GroupLinkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gld.sqlExec, gld.mutation, gld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gld *GroupLinkDelete) ExecX(ctx context.Context) int {
	n, err := gld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gld *GroupLinkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(grouplink.Table, sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt))
	if ps := gld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gld.mutation.done = true
	return affected, err
}

// GroupLinkDeleteOne is the builder for deleting a single GroupLink entity.
type GroupLinkDeleteOne struct {
	gld *GroupLinkDelete
}

// Where appends a list predicates to the GroupLinkDelete builder.
func (gldo *GroupLinkDeleteOne) Where(ps ...predicate.GroupLink) *GroupLinkDeleteOne {
	gldo.gld.mutation.Where(ps...)
	return gldo
}

// Exec executes the deletion query.
func (gldo *GroupLinkDeleteOne) Exec(ctx context.Context) error {
	n, err := gldo.gld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grouplink.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gldo *GroupLinkDeleteOne) ExecX(ctx context.Context) {
	if err := gldo.Exec(ctx); err != nil {
		panic(err)
	}
}
