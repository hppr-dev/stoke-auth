// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/claim"
	"stoke/internal/ent/claimgroup"
	"stoke/internal/ent/grouplink"
	"stoke/internal/ent/predicate"
	"stoke/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClaimGroupUpdate is the builder for updating ClaimGroup entities.
type ClaimGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ClaimGroupMutation
}

// Where appends a list predicates to the ClaimGroupUpdate builder.
func (cgu *ClaimGroupUpdate) Where(ps ...predicate.ClaimGroup) *ClaimGroupUpdate {
	cgu.mutation.Where(ps...)
	return cgu
}

// SetName sets the "name" field.
func (cgu *ClaimGroupUpdate) SetName(s string) *ClaimGroupUpdate {
	cgu.mutation.SetName(s)
	return cgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgu *ClaimGroupUpdate) SetNillableName(s *string) *ClaimGroupUpdate {
	if s != nil {
		cgu.SetName(*s)
	}
	return cgu
}

// SetDescription sets the "description" field.
func (cgu *ClaimGroupUpdate) SetDescription(s string) *ClaimGroupUpdate {
	cgu.mutation.SetDescription(s)
	return cgu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cgu *ClaimGroupUpdate) SetNillableDescription(s *string) *ClaimGroupUpdate {
	if s != nil {
		cgu.SetDescription(*s)
	}
	return cgu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cgu *ClaimGroupUpdate) AddUserIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.AddUserIDs(ids...)
	return cgu
}

// AddUsers adds the "users" edges to the User entity.
func (cgu *ClaimGroupUpdate) AddUsers(u ...*User) *ClaimGroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cgu.AddUserIDs(ids...)
}

// AddGroupLinkIDs adds the "group_links" edge to the GroupLink entity by IDs.
func (cgu *ClaimGroupUpdate) AddGroupLinkIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.AddGroupLinkIDs(ids...)
	return cgu
}

// AddGroupLinks adds the "group_links" edges to the GroupLink entity.
func (cgu *ClaimGroupUpdate) AddGroupLinks(g ...*GroupLink) *ClaimGroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cgu.AddGroupLinkIDs(ids...)
}

// AddClaimIDs adds the "claims" edge to the Claim entity by IDs.
func (cgu *ClaimGroupUpdate) AddClaimIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.AddClaimIDs(ids...)
	return cgu
}

// AddClaims adds the "claims" edges to the Claim entity.
func (cgu *ClaimGroupUpdate) AddClaims(c ...*Claim) *ClaimGroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cgu.AddClaimIDs(ids...)
}

// Mutation returns the ClaimGroupMutation object of the builder.
func (cgu *ClaimGroupUpdate) Mutation() *ClaimGroupMutation {
	return cgu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (cgu *ClaimGroupUpdate) ClearUsers() *ClaimGroupUpdate {
	cgu.mutation.ClearUsers()
	return cgu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cgu *ClaimGroupUpdate) RemoveUserIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.RemoveUserIDs(ids...)
	return cgu
}

// RemoveUsers removes "users" edges to User entities.
func (cgu *ClaimGroupUpdate) RemoveUsers(u ...*User) *ClaimGroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cgu.RemoveUserIDs(ids...)
}

// ClearGroupLinks clears all "group_links" edges to the GroupLink entity.
func (cgu *ClaimGroupUpdate) ClearGroupLinks() *ClaimGroupUpdate {
	cgu.mutation.ClearGroupLinks()
	return cgu
}

// RemoveGroupLinkIDs removes the "group_links" edge to GroupLink entities by IDs.
func (cgu *ClaimGroupUpdate) RemoveGroupLinkIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.RemoveGroupLinkIDs(ids...)
	return cgu
}

// RemoveGroupLinks removes "group_links" edges to GroupLink entities.
func (cgu *ClaimGroupUpdate) RemoveGroupLinks(g ...*GroupLink) *ClaimGroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cgu.RemoveGroupLinkIDs(ids...)
}

// ClearClaims clears all "claims" edges to the Claim entity.
func (cgu *ClaimGroupUpdate) ClearClaims() *ClaimGroupUpdate {
	cgu.mutation.ClearClaims()
	return cgu
}

// RemoveClaimIDs removes the "claims" edge to Claim entities by IDs.
func (cgu *ClaimGroupUpdate) RemoveClaimIDs(ids ...int) *ClaimGroupUpdate {
	cgu.mutation.RemoveClaimIDs(ids...)
	return cgu
}

// RemoveClaims removes "claims" edges to Claim entities.
func (cgu *ClaimGroupUpdate) RemoveClaims(c ...*Claim) *ClaimGroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cgu.RemoveClaimIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgu *ClaimGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cgu.sqlSave, cgu.mutation, cgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *ClaimGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *ClaimGroupUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *ClaimGroupUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgu *ClaimGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(claimgroup.Table, claimgroup.Columns, sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt))
	if ps := cgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgu.mutation.Name(); ok {
		_spec.SetField(claimgroup.FieldName, field.TypeString, value)
	}
	if value, ok := cgu.mutation.Description(); ok {
		_spec.SetField(claimgroup.FieldDescription, field.TypeString, value)
	}
	if cgu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cgu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cgu.mutation.GroupLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.RemovedGroupLinksIDs(); len(nodes) > 0 && !cgu.mutation.GroupLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.GroupLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cgu.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.RemovedClaimsIDs(); len(nodes) > 0 && !cgu.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{claimgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cgu.mutation.done = true
	return n, nil
}

// ClaimGroupUpdateOne is the builder for updating a single ClaimGroup entity.
type ClaimGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClaimGroupMutation
}

// SetName sets the "name" field.
func (cguo *ClaimGroupUpdateOne) SetName(s string) *ClaimGroupUpdateOne {
	cguo.mutation.SetName(s)
	return cguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cguo *ClaimGroupUpdateOne) SetNillableName(s *string) *ClaimGroupUpdateOne {
	if s != nil {
		cguo.SetName(*s)
	}
	return cguo
}

// SetDescription sets the "description" field.
func (cguo *ClaimGroupUpdateOne) SetDescription(s string) *ClaimGroupUpdateOne {
	cguo.mutation.SetDescription(s)
	return cguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cguo *ClaimGroupUpdateOne) SetNillableDescription(s *string) *ClaimGroupUpdateOne {
	if s != nil {
		cguo.SetDescription(*s)
	}
	return cguo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cguo *ClaimGroupUpdateOne) AddUserIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.AddUserIDs(ids...)
	return cguo
}

// AddUsers adds the "users" edges to the User entity.
func (cguo *ClaimGroupUpdateOne) AddUsers(u ...*User) *ClaimGroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cguo.AddUserIDs(ids...)
}

// AddGroupLinkIDs adds the "group_links" edge to the GroupLink entity by IDs.
func (cguo *ClaimGroupUpdateOne) AddGroupLinkIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.AddGroupLinkIDs(ids...)
	return cguo
}

// AddGroupLinks adds the "group_links" edges to the GroupLink entity.
func (cguo *ClaimGroupUpdateOne) AddGroupLinks(g ...*GroupLink) *ClaimGroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cguo.AddGroupLinkIDs(ids...)
}

// AddClaimIDs adds the "claims" edge to the Claim entity by IDs.
func (cguo *ClaimGroupUpdateOne) AddClaimIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.AddClaimIDs(ids...)
	return cguo
}

// AddClaims adds the "claims" edges to the Claim entity.
func (cguo *ClaimGroupUpdateOne) AddClaims(c ...*Claim) *ClaimGroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cguo.AddClaimIDs(ids...)
}

// Mutation returns the ClaimGroupMutation object of the builder.
func (cguo *ClaimGroupUpdateOne) Mutation() *ClaimGroupMutation {
	return cguo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (cguo *ClaimGroupUpdateOne) ClearUsers() *ClaimGroupUpdateOne {
	cguo.mutation.ClearUsers()
	return cguo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cguo *ClaimGroupUpdateOne) RemoveUserIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.RemoveUserIDs(ids...)
	return cguo
}

// RemoveUsers removes "users" edges to User entities.
func (cguo *ClaimGroupUpdateOne) RemoveUsers(u ...*User) *ClaimGroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cguo.RemoveUserIDs(ids...)
}

// ClearGroupLinks clears all "group_links" edges to the GroupLink entity.
func (cguo *ClaimGroupUpdateOne) ClearGroupLinks() *ClaimGroupUpdateOne {
	cguo.mutation.ClearGroupLinks()
	return cguo
}

// RemoveGroupLinkIDs removes the "group_links" edge to GroupLink entities by IDs.
func (cguo *ClaimGroupUpdateOne) RemoveGroupLinkIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.RemoveGroupLinkIDs(ids...)
	return cguo
}

// RemoveGroupLinks removes "group_links" edges to GroupLink entities.
func (cguo *ClaimGroupUpdateOne) RemoveGroupLinks(g ...*GroupLink) *ClaimGroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cguo.RemoveGroupLinkIDs(ids...)
}

// ClearClaims clears all "claims" edges to the Claim entity.
func (cguo *ClaimGroupUpdateOne) ClearClaims() *ClaimGroupUpdateOne {
	cguo.mutation.ClearClaims()
	return cguo
}

// RemoveClaimIDs removes the "claims" edge to Claim entities by IDs.
func (cguo *ClaimGroupUpdateOne) RemoveClaimIDs(ids ...int) *ClaimGroupUpdateOne {
	cguo.mutation.RemoveClaimIDs(ids...)
	return cguo
}

// RemoveClaims removes "claims" edges to Claim entities.
func (cguo *ClaimGroupUpdateOne) RemoveClaims(c ...*Claim) *ClaimGroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cguo.RemoveClaimIDs(ids...)
}

// Where appends a list predicates to the ClaimGroupUpdate builder.
func (cguo *ClaimGroupUpdateOne) Where(ps ...predicate.ClaimGroup) *ClaimGroupUpdateOne {
	cguo.mutation.Where(ps...)
	return cguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cguo *ClaimGroupUpdateOne) Select(field string, fields ...string) *ClaimGroupUpdateOne {
	cguo.fields = append([]string{field}, fields...)
	return cguo
}

// Save executes the query and returns the updated ClaimGroup entity.
func (cguo *ClaimGroupUpdateOne) Save(ctx context.Context) (*ClaimGroup, error) {
	return withHooks(ctx, cguo.sqlSave, cguo.mutation, cguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *ClaimGroupUpdateOne) SaveX(ctx context.Context) *ClaimGroup {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *ClaimGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *ClaimGroupUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cguo *ClaimGroupUpdateOne) sqlSave(ctx context.Context) (_node *ClaimGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(claimgroup.Table, claimgroup.Columns, sqlgraph.NewFieldSpec(claimgroup.FieldID, field.TypeInt))
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClaimGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, claimgroup.FieldID)
		for _, f := range fields {
			if !claimgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != claimgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cguo.mutation.Name(); ok {
		_spec.SetField(claimgroup.FieldName, field.TypeString, value)
	}
	if value, ok := cguo.mutation.Description(); ok {
		_spec.SetField(claimgroup.FieldDescription, field.TypeString, value)
	}
	if cguo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cguo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   claimgroup.UsersTable,
			Columns: claimgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cguo.mutation.GroupLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.RemovedGroupLinksIDs(); len(nodes) > 0 && !cguo.mutation.GroupLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.GroupLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   claimgroup.GroupLinksTable,
			Columns: []string{claimgroup.GroupLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouplink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cguo.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.RemovedClaimsIDs(); len(nodes) > 0 && !cguo.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   claimgroup.ClaimsTable,
			Columns: claimgroup.ClaimsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClaimGroup{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{claimgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cguo.mutation.done = true
	return _node, nil
}
