// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stoke/internal/ent/dbinitfile"
	"stoke/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DBInitFileUpdate is the builder for updating DBInitFile entities.
type DBInitFileUpdate struct {
	config
	hooks    []Hook
	mutation *DBInitFileMutation
}

// Where appends a list predicates to the DBInitFileUpdate builder.
func (difu *DBInitFileUpdate) Where(ps ...predicate.DBInitFile) *DBInitFileUpdate {
	difu.mutation.Where(ps...)
	return difu
}

// SetFilename sets the "filename" field.
func (difu *DBInitFileUpdate) SetFilename(s string) *DBInitFileUpdate {
	difu.mutation.SetFilename(s)
	return difu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (difu *DBInitFileUpdate) SetNillableFilename(s *string) *DBInitFileUpdate {
	if s != nil {
		difu.SetFilename(*s)
	}
	return difu
}

// SetMd5 sets the "md5" field.
func (difu *DBInitFileUpdate) SetMd5(s string) *DBInitFileUpdate {
	difu.mutation.SetMd5(s)
	return difu
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (difu *DBInitFileUpdate) SetNillableMd5(s *string) *DBInitFileUpdate {
	if s != nil {
		difu.SetMd5(*s)
	}
	return difu
}

// Mutation returns the DBInitFileMutation object of the builder.
func (difu *DBInitFileUpdate) Mutation() *DBInitFileMutation {
	return difu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (difu *DBInitFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, difu.sqlSave, difu.mutation, difu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (difu *DBInitFileUpdate) SaveX(ctx context.Context) int {
	affected, err := difu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (difu *DBInitFileUpdate) Exec(ctx context.Context) error {
	_, err := difu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (difu *DBInitFileUpdate) ExecX(ctx context.Context) {
	if err := difu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (difu *DBInitFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbinitfile.Table, dbinitfile.Columns, sqlgraph.NewFieldSpec(dbinitfile.FieldID, field.TypeInt))
	if ps := difu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := difu.mutation.Filename(); ok {
		_spec.SetField(dbinitfile.FieldFilename, field.TypeString, value)
	}
	if value, ok := difu.mutation.Md5(); ok {
		_spec.SetField(dbinitfile.FieldMd5, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, difu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbinitfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	difu.mutation.done = true
	return n, nil
}

// DBInitFileUpdateOne is the builder for updating a single DBInitFile entity.
type DBInitFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DBInitFileMutation
}

// SetFilename sets the "filename" field.
func (difuo *DBInitFileUpdateOne) SetFilename(s string) *DBInitFileUpdateOne {
	difuo.mutation.SetFilename(s)
	return difuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (difuo *DBInitFileUpdateOne) SetNillableFilename(s *string) *DBInitFileUpdateOne {
	if s != nil {
		difuo.SetFilename(*s)
	}
	return difuo
}

// SetMd5 sets the "md5" field.
func (difuo *DBInitFileUpdateOne) SetMd5(s string) *DBInitFileUpdateOne {
	difuo.mutation.SetMd5(s)
	return difuo
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (difuo *DBInitFileUpdateOne) SetNillableMd5(s *string) *DBInitFileUpdateOne {
	if s != nil {
		difuo.SetMd5(*s)
	}
	return difuo
}

// Mutation returns the DBInitFileMutation object of the builder.
func (difuo *DBInitFileUpdateOne) Mutation() *DBInitFileMutation {
	return difuo.mutation
}

// Where appends a list predicates to the DBInitFileUpdate builder.
func (difuo *DBInitFileUpdateOne) Where(ps ...predicate.DBInitFile) *DBInitFileUpdateOne {
	difuo.mutation.Where(ps...)
	return difuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (difuo *DBInitFileUpdateOne) Select(field string, fields ...string) *DBInitFileUpdateOne {
	difuo.fields = append([]string{field}, fields...)
	return difuo
}

// Save executes the query and returns the updated DBInitFile entity.
func (difuo *DBInitFileUpdateOne) Save(ctx context.Context) (*DBInitFile, error) {
	return withHooks(ctx, difuo.sqlSave, difuo.mutation, difuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (difuo *DBInitFileUpdateOne) SaveX(ctx context.Context) *DBInitFile {
	node, err := difuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (difuo *DBInitFileUpdateOne) Exec(ctx context.Context) error {
	_, err := difuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (difuo *DBInitFileUpdateOne) ExecX(ctx context.Context) {
	if err := difuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (difuo *DBInitFileUpdateOne) sqlSave(ctx context.Context) (_node *DBInitFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbinitfile.Table, dbinitfile.Columns, sqlgraph.NewFieldSpec(dbinitfile.FieldID, field.TypeInt))
	id, ok := difuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DBInitFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := difuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbinitfile.FieldID)
		for _, f := range fields {
			if !dbinitfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbinitfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := difuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := difuo.mutation.Filename(); ok {
		_spec.SetField(dbinitfile.FieldFilename, field.TypeString, value)
	}
	if value, ok := difuo.mutation.Md5(); ok {
		_spec.SetField(dbinitfile.FieldMd5, field.TypeString, value)
	}
	_node = &DBInitFile{config: difuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, difuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbinitfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	difuo.mutation.done = true
	return _node, nil
}
