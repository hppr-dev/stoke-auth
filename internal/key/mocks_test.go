package key_test

import (
	"context"
	"crypto/ecdsa"
	"crypto/ed25519"
	"crypto/rsa"
	"crypto/x509"
	"os"
	"stoke/internal/ent"
	"stoke/internal/ent/enttest"
	"stoke/internal/key"
	"testing"
	"time"

	"github.com/golang-jwt/jwt/v5"
	_ "github.com/mattn/go-sqlite3"
	"github.com/rs/zerolog"
	"hppr.dev/stoke"
)

var (
	ecDER = []byte{
		0x30, 0x77, 0x02, 0x01, 0x01, 0x04, 0x20, 0xf6, 0xf9, 0x55, 0x12,
		0x44, 0x5f, 0x96, 0x4d, 0x07, 0x59, 0x31, 0x3c, 0xe1, 0xca, 0x32,
		0xb5, 0x60, 0x0b, 0x52, 0xd0, 0xdf, 0xd1, 0xe0, 0x52, 0x5c, 0x33,
		0x86, 0x08, 0xc6, 0x5a, 0xd4, 0x11, 0xa0, 0x0a, 0x06, 0x08, 0x2a,
		0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0xa1, 0x44, 0x03, 0x42,
		0x00, 0x04, 0x6c, 0x90, 0xf6, 0xa5, 0x15, 0x52, 0x88, 0xa8, 0xe7,
		0xae, 0x79, 0x04, 0x63, 0xe0, 0xac, 0xfb, 0x49, 0xf7, 0x45, 0xc2,
		0x63, 0x7e, 0x13, 0xb9, 0x87, 0x3c, 0xfc, 0x1f, 0x78, 0xa5, 0x32,
		0x0b, 0xec, 0x85, 0x8d, 0x31, 0x76, 0x40, 0x44, 0xb8, 0x4c, 0x08,
		0xa4, 0x82, 0x45, 0x61, 0x75, 0x02, 0x95, 0xa7, 0x62, 0xc9, 0xef,
		0xa1, 0x99, 0x63, 0xa0, 0x17, 0x13, 0x9e, 0x9f, 0xc1, 0x28, 0x4f,
	}
	rsDER = []byte{
		0x30, 0x81, 0xac, 0x02, 0x01, 0x00, 0x02, 0x21, 0x00, 0xbe, 0xf5, 0xcb, 0xb9, 0x7e,
		0x6a, 0xd4, 0x62, 0x19, 0x1b, 0x50, 0xda, 0x04, 0x3f, 0x94, 0xbe, 0xb1, 0x4a, 0xaf,
		0xe8, 0xa9, 0xda, 0x07, 0x7d, 0x88, 0x05, 0xad, 0xd8, 0xf4, 0x79, 0x6c, 0x75, 0x02,
		0x03, 0x01, 0x00, 0x01, 0x02, 0x21, 0x00, 0x80, 0x1e, 0x65, 0x3a, 0xe4, 0xc8, 0x44,
		0x0a, 0x35, 0x12, 0x10, 0xa2, 0xd5, 0x6a, 0xdb, 0x1e, 0x14, 0x5f, 0xe5, 0x92, 0xd9,
		0x09, 0xc6, 0xba, 0x41, 0xe1, 0x37, 0x88, 0x5b, 0x23, 0xff, 0x01, 0x02, 0x11, 0x00,
		0xed, 0x75, 0x20, 0x75, 0x2d, 0x49, 0x1e, 0x10, 0xa8, 0x31, 0xf9, 0x67, 0x40, 0xbc,
		0x96, 0x95, 0x02, 0x11, 0x00, 0xcd, 0xdf, 0x2a, 0xce, 0x19, 0x57, 0x60, 0xf1, 0x35,
		0x52, 0x8f, 0xb2, 0x7c, 0xb1, 0x66, 0x61, 0x02, 0x11, 0x00, 0xcb, 0x09, 0x5c, 0x60,
		0x75, 0x01, 0x51, 0x00, 0xc3, 0x20, 0x3f, 0xf5, 0xc6, 0x87, 0xba, 0x65, 0x02, 0x10,
		0x19, 0xcd, 0x7c, 0xb9, 0xf4, 0x27, 0x25, 0x79, 0x55, 0xeb, 0x91, 0x23, 0x17, 0xc9,
		0xcc, 0x41, 0x02, 0x11, 0x00, 0xd9, 0xde, 0xe0, 0x62, 0xb4, 0x84, 0x7e, 0x6e, 0x16,
		0xf2, 0x0f, 0x7d, 0x31, 0x09, 0x66, 0x72,
	}
	edKey = ed25519.PrivateKey{
		0x0c, 0x71, 0x90, 0x2b, 0x0d, 0x28, 0x0c, 0x37, 0x0c, 0x71, 0x90, 0x2b, 0x0d, 0x28, 0x0c, 0x37,
		0x0c, 0x71, 0x90, 0x2b, 0x0d, 0x28, 0x0c, 0x37, 0x0c, 0x71, 0x90, 0x2b, 0x0d, 0x28, 0x0c, 0x37,
		0xb5, 0xfb, 0x5b, 0x3e, 0xc5, 0x6e, 0x2f, 0xce, 0x53, 0xd2, 0x3c, 0x63, 0x77, 0x39, 0x31, 0x12,
		0xb5, 0xd0, 0x4a, 0x69, 0x6d, 0xd2, 0x1e, 0x33, 0x11, 0x18, 0x92, 0xf9, 0xae, 0x4e, 0x88, 0x00,
	}
	edKeyPair = &key.EdDSAKeyPair{
		PrivateKey: edKey,
	}
)

type MockKeyCache struct{}

func (m *MockKeyCache) Keys() []key.KeyPair[ed25519.PrivateKey] {
	return []key.KeyPair[ed25519.PrivateKey]{ edKeyPair }
}

func (m *MockKeyCache) ParseClaims(context.Context, string, *stoke.Claims, ...jwt.ParserOption) (*jwt.Token, error) {
	return nil, nil
}

func (m *MockKeyCache) CurrentKey() key.KeyPair[ed25519.PrivateKey] {
	return edKeyPair
}

func (m *MockKeyCache) PublicKeys(context.Context) ([]byte, error) {
	return edKeyPair.PrivateKey.Public().([]byte), nil
}

func (m *MockKeyCache) Bootstrap(context.Context, key.KeyPair[ed25519.PrivateKey]) error { return nil }
func (m *MockKeyCache) Generate(context.Context) error { return nil }
func (m *MockKeyCache) ReadLock() { return }
func (m *MockKeyCache) ReadUnlock() { return }

func NewMockContext() context.Context {
	ctx := context.Background()
	ctx = zerolog.New(os.Stdout).WithContext(ctx)
	return ctx
}

type DatabaseMutation func(*ent.Client) error

func WithDatabase(t *testing.T, ctx context.Context, mutations ...DatabaseMutation) context.Context {
	client := enttest.Open(t, "sqlite3", "file:ent?mode=memory&_fk=1")
	for _, mut := range mutations {
		if err := mut(client); err != nil {
			t.Logf("Database mutation failed: %v", err)
		}
	}
	return ent.NewContext(ctx, client)
}

func ForeverToken() DatabaseMutation {
	return TokenWithExpires(time.Date(5000, time.January, 10, 10, 10, 10, 10, time.UTC))
}

func TokenWithExpires(exp time.Time) DatabaseMutation {
	return func(client *ent.Client) error {
		_, err := client.PrivateKey.Create().
			SetExpires(exp).
			SetText("DHGQKw0oDDcMcZArDSgMNwxxkCsNKAw3DHGQKw0oDDe1+1s+xW4vzlPSPGN3OTEStdBKaW3SHjMRGJL5rk6IAA==").
			Save(context.Background())
		return err
	}
}


func buildEdDSAKey() ed25519.PrivateKey {
	return edKey
}

func buildECDSAKey() *ecdsa.PrivateKey {
	k, err := x509.ParseECPrivateKey(ecDER)
	if err != nil {
		panic("Could not parse ECDSA Key!")
	}
	return k
}

func buildRSAKey() *rsa.PrivateKey {
	k, err := x509.ParsePKCS1PrivateKey(rsDER)
	if err != nil {
		panic("Could not parse RSA Key!")
	}
	return k
}
