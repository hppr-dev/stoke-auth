// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: engine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineRoomClient is the client API for EngineRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineRoomClient interface {
	StatusStream(ctx context.Context, in *StatusSettings, opts ...grpc.CallOption) (EngineRoom_StatusStreamClient, error)
	SpeedCommand(ctx context.Context, in *SpeedRequest, opts ...grpc.CallOption) (*SpeedReply, error)
	FooBarTest(ctx context.Context, opts ...grpc.CallOption) (EngineRoom_FooBarTestClient, error)
}

type engineRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineRoomClient(cc grpc.ClientConnInterface) EngineRoomClient {
	return &engineRoomClient{cc}
}

func (c *engineRoomClient) StatusStream(ctx context.Context, in *StatusSettings, opts ...grpc.CallOption) (EngineRoom_StatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EngineRoom_ServiceDesc.Streams[0], "/engine.EngineRoom/StatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineRoomStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EngineRoom_StatusStreamClient interface {
	Recv() (*StatusReply, error)
	grpc.ClientStream
}

type engineRoomStatusStreamClient struct {
	grpc.ClientStream
}

func (x *engineRoomStatusStreamClient) Recv() (*StatusReply, error) {
	m := new(StatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineRoomClient) SpeedCommand(ctx context.Context, in *SpeedRequest, opts ...grpc.CallOption) (*SpeedReply, error) {
	out := new(SpeedReply)
	err := c.cc.Invoke(ctx, "/engine.EngineRoom/SpeedCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineRoomClient) FooBarTest(ctx context.Context, opts ...grpc.CallOption) (EngineRoom_FooBarTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &EngineRoom_ServiceDesc.Streams[1], "/engine.EngineRoom/FooBarTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineRoomFooBarTestClient{stream}
	return x, nil
}

type EngineRoom_FooBarTestClient interface {
	Send(*SimpleMessage) error
	Recv() (*SimpleMessage, error)
	grpc.ClientStream
}

type engineRoomFooBarTestClient struct {
	grpc.ClientStream
}

func (x *engineRoomFooBarTestClient) Send(m *SimpleMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *engineRoomFooBarTestClient) Recv() (*SimpleMessage, error) {
	m := new(SimpleMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EngineRoomServer is the server API for EngineRoom service.
// All implementations must embed UnimplementedEngineRoomServer
// for forward compatibility
type EngineRoomServer interface {
	StatusStream(*StatusSettings, EngineRoom_StatusStreamServer) error
	SpeedCommand(context.Context, *SpeedRequest) (*SpeedReply, error)
	FooBarTest(EngineRoom_FooBarTestServer) error
	mustEmbedUnimplementedEngineRoomServer()
}

// UnimplementedEngineRoomServer must be embedded to have forward compatible implementations.
type UnimplementedEngineRoomServer struct {
}

func (UnimplementedEngineRoomServer) StatusStream(*StatusSettings, EngineRoom_StatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusStream not implemented")
}
func (UnimplementedEngineRoomServer) SpeedCommand(context.Context, *SpeedRequest) (*SpeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeedCommand not implemented")
}
func (UnimplementedEngineRoomServer) FooBarTest(EngineRoom_FooBarTestServer) error {
	return status.Errorf(codes.Unimplemented, "method FooBarTest not implemented")
}
func (UnimplementedEngineRoomServer) mustEmbedUnimplementedEngineRoomServer() {}

// UnsafeEngineRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineRoomServer will
// result in compilation errors.
type UnsafeEngineRoomServer interface {
	mustEmbedUnimplementedEngineRoomServer()
}

func RegisterEngineRoomServer(s grpc.ServiceRegistrar, srv EngineRoomServer) {
	s.RegisterService(&EngineRoom_ServiceDesc, srv)
}

func _EngineRoom_StatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineRoomServer).StatusStream(m, &engineRoomStatusStreamServer{stream})
}

type EngineRoom_StatusStreamServer interface {
	Send(*StatusReply) error
	grpc.ServerStream
}

type engineRoomStatusStreamServer struct {
	grpc.ServerStream
}

func (x *engineRoomStatusStreamServer) Send(m *StatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func _EngineRoom_SpeedCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineRoomServer).SpeedCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.EngineRoom/SpeedCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineRoomServer).SpeedCommand(ctx, req.(*SpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineRoom_FooBarTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EngineRoomServer).FooBarTest(&engineRoomFooBarTestServer{stream})
}

type EngineRoom_FooBarTestServer interface {
	Send(*SimpleMessage) error
	Recv() (*SimpleMessage, error)
	grpc.ServerStream
}

type engineRoomFooBarTestServer struct {
	grpc.ServerStream
}

func (x *engineRoomFooBarTestServer) Send(m *SimpleMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *engineRoomFooBarTestServer) Recv() (*SimpleMessage, error) {
	m := new(SimpleMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EngineRoom_ServiceDesc is the grpc.ServiceDesc for EngineRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.EngineRoom",
	HandlerType: (*EngineRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpeedCommand",
			Handler:    _EngineRoom_SpeedCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusStream",
			Handler:       _EngineRoom_StatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FooBarTest",
			Handler:       _EngineRoom_FooBarTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "engine.proto",
}
